<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.dalbit.money.dao.Mon_ExchangeDao" >

    <sql id="baseExchange">
        select @RNUM := @RNUM + 1 as rowNum, a.*
        from(
        select
        a.*
        , ifnull(exchangeCnt, 0) exchangeCnt
        , ifnull(totalCashBasic, 0) totalCashBasic
        , ifnull(totalCashReal, 0) totalCashReal
        , ifnull((select concat(aa.mem_birth_year, '-', LPAD(aa.mem_birth_month,2,'0'), '-', LPAD(aa.mem_birth_day,2,'0')) as birth from rd_data.tb_member_basic aa where aa.mem_no = a.mem_no)
        , (select concat(aa.mem_birth_year, '-', LPAD(aa.mem_birth_month,2,'0'), '-', LPAD(aa.mem_birth_day,2,'0')) as birth from rd_data.tb_member_withdrawal_bak aa where aa.mem_no = a.mem_no)) as birth
        , (select recant_yn from rd_data.tb_member_certification where mem_no = a.mem_no limit 1) recant_yn
        from (
        select IFNULL(basic.mem_no, withdrawal.mem_no) mem_no,
        IFNULL(basic.mem_id, withdrawal.mem_id) mem_id,
        IFNULL(basic.mem_name, withdrawal.mem_name) mem_name,
        IFNULL(basic.mem_nick, withdrawal.mem_nick) mem_nick,
        IFNULL(basic.mem_sex, withdrawal.mem_sex) mem_sex,
        IFNULL(basic.mem_state, withdrawal.mem_state) mem_state,
        IFNULL(basic.mem_phone, withdrawal.mem_phone) mem_phone,
        IFNULL(basic.mem_userid, withdrawal.mem_userid) mem_userid,
        IFNULL(basic.inner, withdrawal.inner) as  `inner`,
        profile.image_profile,
        exchange.idx,
        exchange.byeol,
        exchange.cash_basic,
        exchange.income_tax,
        exchange.resident_tax,
        exchange.transfer_fee,
        exchange.benefit,
        exchange.cash_real,
        exchange.account_name,
        exchange.bank_code,
        (select code from rd_data.tbl_code_define where `type` = 'exchange_bank_code' and `value` = exchange.bank_code) bank_name,
        exchange.account_no,
        exchange.social_no,
        exchange.phone_no,
        exchange.address_1,
        exchange.address_2,
        exchange.add_file1,
        exchange.add_file2,
        exchange.add_file3,
        exchange.terms_agree,
        exchange.os_type,
        exchange.ip,
        exchange.confirm,
        exchange.state,
        exchange.op_msg,
        exchange.op_name,
        exchange.op_date,
        date_format(exchange.reg_date,'%Y-%m-%d %H:%i:%s') AS reg_date,
        exchange.send_title,
        exchange.send_cont,
        exchange.send_type,
        exchange.last_upd_date,
        wallet.gold,
        (select account_name from rd_data.tb_member_exchange where mem_no = ifnull(basic.mem_no,withdrawal.mem_no) and latest_idx = 0 and `state` = 1 order by idx desc limit 1) prevAccountName,
        (select social_no from rd_data.tb_member_exchange where mem_no = ifnull(basic.mem_no,withdrawal.mem_no) and latest_idx = 0 and `state` = 1 order by idx desc limit 1) prevSocialNo
        from rd_data.tb_member_exchange exchange
        inner join rd_data.tb_member_profile profile on exchange.mem_no = profile.mem_no
        inner join rd_data.tb_member_wallet wallet on exchange.mem_no = wallet.mem_no
        left join rd_admin.tb_special_dj special on exchange.mem_no = special.mem_no and special.select_year = #{search_year} and special.select_month = #{search_month}
        left join rd_data.tb_play_maker_mem p on exchange.mem_no = p.mem_no AND end_date > NOW()
        left join rd_data.tb_member_basic basic on exchange.mem_no = basic.mem_no
        left join rd_data.tb_member_withdrawal_bak withdrawal on exchange.mem_no = withdrawal.mem_no
        inner join (select @RNUM := 0) r
        where
        <if test='baseDay == null'>
            <if test="end_year == null">
                DATE_FORMAT(exchange.reg_date , '%Y%m') = concat(#{search_year}, #{search_month})
            </if>
            <if test="end_year != null">
                concat(#{search_year}, #{search_month}, #{search_day}) <![CDATA[<=]]> DATE_FORMAT(exchange.reg_date, '%Y%m%d')
                and DATE_FORMAT(exchange.reg_date, '%Y%m%d') <![CDATA[<=]]> concat(#{end_year}, #{end_month}, #{end_day})
            </if>
        </if>
        <if test='baseDay == "opdate"'>
            <if test="end_year == null">
                DATE_FORMAT(exchange.op_date , '%Y%m') = concat(#{search_year}, #{search_month})
            </if>
            <if test="end_year != null">
                concat(#{search_year}, #{search_month}, #{search_day}) <![CDATA[<=]]> DATE_FORMAT(exchange.op_date, '%Y%m%d')
                and DATE_FORMAT(exchange.op_date, '%Y%m%d') <![CDATA[<=]]> concat(#{end_year}, #{end_month}, #{end_day})
            </if>
        </if>
        <!--concat(#{search_year}, #{search_month}) = DATE_FORMAT(exchange.reg_date, '%Y%m')-->

        <if test='searchText != null and searchText != ""'>
            <choose>
                <when test="newSearchType == 1">
                    and (basic.mem_no = #{searchText} or withdrawal.mem_no = #{searchText})
                </when>
                <when test="newSearchType == 2">
                    and (basic.mem_nick like concat('%', #{searchText}, '%') or withdrawal.mem_nick like concat('%', #{searchText}, '%'))
                </when>
                <when test="newSearchType == 3">
                    and (basic.mem_name = #{searchText} or withdrawal.mem_name = #{searchText})
                </when>
                <when test="newSearchType == 4">
                    and (basic.mem_phone = #{searchText} or withdrawal.mem_phone = #{searchText})
                </when>
                <when test="newSearchType == 5">
                    and (basic.mem_userid = #{searchText} or withdrawal.mem_userid = #{searchText})
                </when>
                <when test="newSearchType == 6">
                    and (basic.mem_ip in (SELECT distinct mem_no FROM rd_data.tb_member_session_history WHERE ip = #{searchText})
                    or withdrawal.mem_ip in (SELECT distinct mem_no FROM rd_data.tb_member_session_history WHERE ip = #{searchText}))
                </when>
                <otherwise>
                    and (basic.mem_no in (SELECT distinct mem_no FROM rd_data.tb_member_session_history WHERE device_uuid = #{searchText})
                    or withdrawal.mem_no in (SELECT distinct mem_no FROM rd_data.tb_member_session_history WHERE device_uuid = #{searchText}))
                </otherwise>
            </choose>
        </if>

        <if test='gender != "0" and gender != "" and gender != null'>
            and IFNULL(basic.mem_sex, withdrawal.mem_sex) = #{gender}
        </if>
        <if test='search_state != null and search_state != "" and search_state != -1'>
            and exchange.state = #{search_state}
        </if>

        <if test='excelYn == "Y" and limitDay != ""'>
            and DATE_FORMAT(exchange.reg_date, '%Y%m%d') <![CDATA[<]]> #{limitDay}
        </if>

        <if test='search_testId == 1'>
            and (basic.inner = 0 or withdrawal.inner = 0)
        </if>

        <choose>
            <when test='idx != null and idx != 0'>
                <if test='search_year == null'>
                    or exchange.idx = #{idx}
                </if>
                <if test='search_year != null'>
                    and exchange.idx = #{idx}
                </if>
            </when>
            <otherwise>
                <choose>
                    <when test="last_reject == 0">
                        and exchange.state in ( 2, 4 )
                    </when>
                    <when test='last_reject != 0'>
                        and (exchange.state in (0,1,4) or ( exchange.state = 2 and exchange.last_reject = #{last_reject}))
                        <choose>
                            <when test="isSpecial == 0">
                                and special.mem_no is null
                            </when>
                            <when test="isSpecial == 1">
                                and special.mem_no is not null
                            </when>
                            <when test="isSpecial == 2">
                                and p.mem_no is not null
                            </when>
                        </choose>
                    </when>
                </choose>
            </otherwise>
        </choose>
        order by
        <if test="exchange_sort == 0"> exchange.idx desc,  </if>
        <if test="exchange_sort == 1"> exchange.byeol desc,  </if>
        <if test="exchange_sort == 2"> wallet.gold desc,  </if>
        <if test="exchange_sort == 3"> exchange.op_date desc,  </if>
        <if test="exchange_sort == 4"> exchange.cash_real desc,  </if>
        exchange.idx desc
        ) a
        left join
        (
        select
        mem_no memNo
        , count(mem_no) exchangeCnt
        , sum(cash_basic) totalCashBasic
        , sum(cash_real) totalCashReal
        from rd_data.tb_member_exchange
        where state = 1
        group by mem_no
        ) summary on a.mem_no = summary.memNo
        <if test="exchange_sort == 5"> order by summary.totalCashReal desc  </if>
        ) a
        inner join (select @RNUM := 0) r

    </sql>

    <select id="selectExchangeList" parameterType="com.dalbit.money.vo.Mon_ExchangeInputVo" resultType="com.dalbit.money.vo.Mon_ExchangeOutputVo">
        /* Mon_Exchange.xml - selectExchangeList */
        select
        *
        from (
        <include refid="baseExchange" />
        ) a
        <if test='excelYn != "Y"'>
            where a.rowNum between #{searchStartNo, jdbcType=INTEGER} and #{searchEndNo, jdbcType=INTEGER}
        </if>

    </select>

    <select id="selectExchangeCnt" parameterType="com.dalbit.money.vo.Mon_ExchangeInputVo" resultType="integer">
        /* Mon_Exchange.xml - selectExchangeCnt */
        select count(*)
        from (
        <include refid="baseExchange" />
        ) a
    </select>

    <select id="selectCompleteExchangeList" parameterType="com.dalbit.money.vo.Mon_ExchangeInputVo" resultType="com.dalbit.money.vo.Mon_ExchangeOutputVo">
        /* Mon_Exchange.xml - selectCompleteExchangeList */
        SELECT
            exchange.mem_no
            , ifnull(basic.mem_userid, withdrawal.mem_userid)  as mem_userid
            , ifnull(basic.mem_name, withdrawal.mem_name)  as mem_name
            , exchange.account_name
            , exchange.cash_basic
            , exchange.benefit
            , exchange.income_tax
            , exchange.resident_tax
            , exchange.transfer_fee
            , exchange.cash_real
            , (select account_name from rd_data.tb_member_exchange where mem_no = ifnull(basic.mem_no,withdrawal.mem_no) and latest_idx = 0 and `state` = 1 order by idx desc limit 1) prevAccountName
            , (select social_no from rd_data.tb_member_exchange where mem_no = ifnull(basic.mem_no,withdrawal.mem_no) and latest_idx = 0 and `state` = 1 order by idx desc limit 1) prevSocialNo
            , exchange.social_no
            , exchange.phone_no
            , exchange.bank_code
            , (select code from rd_data.tbl_code_define where `type` = 'exchange_bank_code' and `value` = bank_code) bank_name
            , exchange.account_no
            , exchange.address_1
            , exchange.address_2
            , date_format(exchange.reg_date,'%Y-%m-%d %H:%i:%s') AS reg_date
        FROM rd_data.tb_member_exchange exchange
        left join rd_data.tb_member_basic basic on exchange.mem_no = basic.mem_no
        left join rd_data.tb_member_withdrawal_bak withdrawal on exchange.mem_no = withdrawal.mem_no
        WHERE DATE_FORMAT(#{startDate},'%Y-%m-%d 00:00:00') <![CDATA[<=]]> op_date
            AND op_date <![CDATA[<=]]> DATE_FORMAT(#{endDate},'%Y-%m-%d 23:59:59')
            and state = 1
        <if test='search_testId == 1'>
            and (basic.inner = 0 or withdrawal.inner = 0)
        </if>
    </select>

    <select id="selectExchangeDetail" parameterType="com.dalbit.money.vo.Mon_ExchangeInputVo" resultType="com.dalbit.money.vo.Mon_ExchangeOutputVo">
        /* Mon_Exchange.xml - selectExchangeDetail */
        select *
        from (
        <include refid="baseExchange" />
        ) a
    </select>

    <select id="selectSummaryInfo" parameterType="com.dalbit.money.vo.Mon_ExchangeInputVo" resultType="int">
        /* Mon_Exchange.xml - selectSummaryInfo */
        -- 미처리 건 수
        select ifnull(sum(cnt), 0) cnt
        from (
        select 1 cnt
        from rd_data.tb_member_exchange exchange
        left join rd_admin.tb_special_dj special
        on exchange.mem_no = special.mem_no
        <choose>
            <when test="end_year == null">
                and special.select_year = #{search_year}
                and special.select_month = #{search_month}
            </when>
            <otherwise>
                and #{search_year} <![CDATA[<=]]> special.select_year
                and special.select_year <![CDATA[<=]]> #{end_year}

                and #{search_month} <![CDATA[<=]]> special.select_month
                and special.select_month <![CDATA[<=]]> #{end_month}
            </otherwise>
        </choose>

        left join rd_data.tb_member_basic basic
        on exchange.mem_no = basic.mem_no
        LEFT JOIN rd_data.tb_play_maker_mem p ON exchange.mem_no = p.mem_no AND end_date > NOW()
        where exchange.state = 0
        <choose>
            <when test="end_year == null">
                and DATE_FORMAT(exchange.reg_date , '%Y%m') = concat(#{search_year}, #{search_month})
            </when>
            <otherwise>
                and concat(#{search_year}, #{search_month}, #{search_day}) <![CDATA[<=]]> DATE_FORMAT(exchange.reg_date, '%Y%m%d')
                and DATE_FORMAT(exchange.reg_date, '%Y%m%d') <![CDATA[<=]]> concat(#{end_year}, #{end_month}, #{end_day})
            </otherwise>
        </choose>

        <choose>
            <when test="isSpecial == 0">
                and special.mem_no is null and p.mem_no is null
            </when>
            <when test="isSpecial == 1">
                and special.mem_no is not null and p.mem_no is null
            </when>
            <when test="isSpecial == 2">
                and p.mem_no is not null
            </when>
        </choose>
        <if test='search_testId == 1'>
            and basic.inner = 0
        </if>
        )a

        union all
        -- 미처리 신청금액
        select ifnull(sum(cash_real), 0) cash_basic
        from rd_data.tb_member_exchange exchange
        left join rd_admin.tb_special_dj special
        on exchange.mem_no = special.mem_no
        <choose>
            <when test="end_year == null">
                and special.select_year = #{search_year}
                and special.select_month = #{search_month}
            </when>
            <otherwise>
                and #{search_year} <![CDATA[<=]]> special.select_year
                and special.select_year <![CDATA[<=]]> #{end_year}

                and #{search_month} <![CDATA[<=]]> special.select_month
                and special.select_month <![CDATA[<=]]> #{end_month}
            </otherwise>
        </choose>
        left join rd_data.tb_member_basic basic
        on exchange.mem_no = basic.mem_no
        LEFT JOIN rd_data.tb_member_withdrawal_bak f ON exchange.mem_no = f.mem_no
        LEFT JOIN rd_data.tb_play_maker_mem p ON exchange.mem_no = p.mem_no AND end_date > NOW()
        where exchange.state = 0
        <choose>
            <when test="end_year == null">
                and DATE_FORMAT(exchange.reg_date , '%Y%m') = concat(#{search_year}, #{search_month})
            </when>
            <otherwise>
                and concat(#{search_year}, #{search_month}, #{search_day}) <![CDATA[<=]]> DATE_FORMAT(exchange.reg_date, '%Y%m%d')
                and DATE_FORMAT(exchange.reg_date, '%Y%m%d') <![CDATA[<=]]> concat(#{end_year}, #{end_month}, #{end_day})
            </otherwise>
        </choose>

        <choose>
            <when test="isSpecial == 0">
                AND special.mem_no IS NULL AND p.mem_no IS NULL
            </when>
            <when test="isSpecial == 1">
                AND special.mem_no IS NOT NULL AND p.mem_no IS NULL
            </when>
            <when test="isSpecial == 2">
                AND p.mem_no IS NOT NULL
            </when>
        </choose>
        <if test='search_testId == 1'>
            and (basic.inner = 0 or f.inner = 0)
        </if>

        union all
        -- 미처리 신청 별 수
        select ifnull(sum(byeol), 0) byeol
        from rd_data.tb_member_exchange exchange
        left join rd_admin.tb_special_dj special
        on exchange.mem_no = special.mem_no
        <choose>
            <when test="end_year == null">
                and special.select_year = #{search_year}
                and special.select_month = #{search_month}
            </when>
            <otherwise>
                and #{search_year} <![CDATA[<=]]> special.select_year
                and special.select_year <![CDATA[<=]]> #{end_year}

                and #{search_month} <![CDATA[<=]]> special.select_month
                and special.select_month <![CDATA[<=]]> #{end_month}
            </otherwise>
        </choose>
        left join rd_data.tb_member_basic basic
        on exchange.mem_no = basic.mem_no
        LEFT JOIN rd_data.tb_member_withdrawal_bak f ON exchange.mem_no = f.mem_no
        LEFT JOIN rd_data.tb_play_maker_mem p ON exchange.mem_no = p.mem_no AND end_date > NOW()
        where exchange.state = 0
        <choose>
            <when test="end_year == null">
                and DATE_FORMAT(exchange.reg_date , '%Y%m') = concat(#{search_year}, #{search_month})
            </when>
            <otherwise>
                and concat(#{search_year}, #{search_month}, #{search_day}) <![CDATA[<=]]> DATE_FORMAT(exchange.reg_date, '%Y%m%d')
                and DATE_FORMAT(exchange.reg_date, '%Y%m%d') <![CDATA[<=]]> concat(#{end_year}, #{end_month}, #{end_day})
            </otherwise>
        </choose>
        <choose>
            <when test="isSpecial == 0">
                AND special.mem_no IS NULL AND p.mem_no IS NULL
            </when>
            <when test="isSpecial == 1">
                AND special.mem_no IS NOT NULL AND p.mem_no IS NULL
            </when>
            <when test="isSpecial == 2">
                AND p.mem_no IS NOT NULL
            </when>
        </choose>
        <if test='search_testId == 1'>
            and (basic.inner = 0 or f.inner = 0)
        </if>

        union all
        -- 처리완료 건 수
        select ifnull(sum(cnt), 0) cnt
        from (
        select 1 cnt
        from rd_data.tb_member_exchange exchange
        left join rd_admin.tb_special_dj special
        on exchange.mem_no = special.mem_no
        LEFT JOIN rd_data.tb_member_withdrawal_bak f ON exchange.mem_no = f.mem_no
        <choose>
            <when test="end_year == null">
                and special.select_year = #{search_year}
                and special.select_month = #{search_month}
            </when>
            <otherwise>
                and #{search_year} <![CDATA[<=]]> special.select_year
                and special.select_year <![CDATA[<=]]> #{end_year}

                and #{search_month} <![CDATA[<=]]> special.select_month
                and special.select_month <![CDATA[<=]]> #{end_month}
            </otherwise>
        </choose>
        left join rd_data.tb_member_basic basic
        on exchange.mem_no = basic.mem_no
        LEFT JOIN rd_data.tb_play_maker_mem p ON exchange.mem_no = p.mem_no AND end_date > NOW()
        where exchange.state = 1
        <choose>
            <when test="end_year == null">
                and DATE_FORMAT(exchange.op_date , '%Y%m') = concat(#{search_year}, #{search_month})
            </when>
            <otherwise>
                and concat(#{search_year}, #{search_month}, #{search_day}) <![CDATA[<=]]> DATE_FORMAT(exchange.last_upd_date, '%Y%m%d')
                and DATE_FORMAT(exchange.last_upd_date, '%Y%m%d') <![CDATA[<=]]> concat(#{end_year}, #{end_month}, #{end_day})
            </otherwise>
        </choose>
        <choose>
            <when test="isSpecial == 0">
                AND special.mem_no IS NULL AND p.mem_no IS NULL
            </when>
            <when test="isSpecial == 1">
                AND special.mem_no IS NOT NULL AND p.mem_no IS NULL
            </when>
            <when test="isSpecial == 2">
                AND p.mem_no IS NOT NULL
            </when>
        </choose>
        <if test='search_testId == 1'>
            and (basic.inner = 0 or f.inner = 0)
        </if>
        )a

        union all
        -- 처리완료 금액
        select ifnull(sum(cash_real), 0) cash_basic
        from rd_data.tb_member_exchange exchange
        left join rd_admin.tb_special_dj special
        on exchange.mem_no = special.mem_no
        <choose>
            <when test="end_year == null">
                and special.select_year = #{search_year}
                and special.select_month = #{search_month}
            </when>
            <otherwise>
                and #{search_year} <![CDATA[<=]]> special.select_year
                and special.select_year <![CDATA[<=]]> #{end_year}

                and #{search_month} <![CDATA[<=]]> special.select_month
                and special.select_month <![CDATA[<=]]> #{end_month}
            </otherwise>
        </choose>
        left join rd_data.tb_member_basic basic
        on exchange.mem_no = basic.mem_no
        LEFT JOIN rd_data.tb_member_withdrawal_bak f ON exchange.mem_no = f.mem_no
        LEFT JOIN rd_data.tb_play_maker_mem p ON exchange.mem_no = p.mem_no AND end_date > NOW()
        where exchange.state = 1
        <choose>
            <when test="end_year == null">
                and DATE_FORMAT(exchange.op_date , '%Y%m') = concat(#{search_year}, #{search_month})
            </when>
            <otherwise>
                and concat(#{search_year}, #{search_month}, #{search_day}) <![CDATA[<=]]> DATE_FORMAT(exchange.last_upd_date, '%Y%m%d')
                and DATE_FORMAT(exchange.last_upd_date, '%Y%m%d') <![CDATA[<=]]> concat(#{end_year}, #{end_month}, #{end_day})
            </otherwise>
        </choose>
        <choose>
            <when test="isSpecial == 0">
                AND special.mem_no IS NULL AND p.mem_no IS NULL
            </when>
            <when test="isSpecial == 1">
                AND special.mem_no IS NOT NULL AND p.mem_no IS NULL
            </when>
            <when test="isSpecial == 2">
                AND p.mem_no IS NOT NULL
            </when>
        </choose>
        <if test='search_testId == 1'>
            and (basic.inner = 0 or f.inner = 0)
        </if>

        union all
        -- 처리완료 별 수
        select ifnull(sum(byeol), 0) byeol
        from rd_data.tb_member_exchange exchange
        left join rd_admin.tb_special_dj special
        on exchange.mem_no = special.mem_no
        <choose>
            <when test="end_year == null">
                and special.select_year = #{search_year}
                and special.select_month = #{search_month}
            </when>
            <otherwise>
                and #{search_year} <![CDATA[<=]]> special.select_year
                and special.select_year <![CDATA[<=]]> #{end_year}

                and #{search_month} <![CDATA[<=]]> special.select_month
                and special.select_month <![CDATA[<=]]> #{end_month}
            </otherwise>
        </choose>
        left join rd_data.tb_member_basic basic
        on exchange.mem_no = basic.mem_no

        LEFT JOIN rd_data.tb_member_withdrawal_bak f ON exchange.mem_no = f.mem_no
        LEFT JOIN rd_data.tb_play_maker_mem p ON exchange.mem_no = p.mem_no AND end_date > NOW()
        where exchange.state = 1
        <choose>
            <when test="end_year == null">
                and DATE_FORMAT(exchange.op_date , '%Y%m') = concat(#{search_year}, #{search_month})
            </when>
            <otherwise>
                and concat(#{search_year}, #{search_month}, #{search_day}) <![CDATA[<=]]> DATE_FORMAT(exchange.last_upd_date, '%Y%m%d')
                and DATE_FORMAT(exchange.last_upd_date, '%Y%m%d') <![CDATA[<=]]> concat(#{end_year}, #{end_month}, #{end_day})
            </otherwise>
        </choose>
        <choose>
            <when test="isSpecial == 0">
                AND special.mem_no IS NULL AND p.mem_no IS NULL
            </when>
            <when test="isSpecial == 1">
                AND special.mem_no IS NOT NULL AND p.mem_no IS NULL
            </when>
            <when test="isSpecial == 2">
                AND p.mem_no IS NOT NULL
            </when>
        </choose>
        <if test='search_testId == 1'>
            and (basic.inner = 0 or f.inner = 0)
        </if>

        union all
        -- 불가 건 수
        select ifnull(sum(cnt), 0) cnt
        from (
        select 1 cnt
        from rd_data.tb_member_exchange exchange
        left join rd_admin.tb_special_dj special
        on exchange.mem_no = special.mem_no
        <choose>
            <when test="end_year == null">
                and special.select_year = #{search_year}
                and special.select_month = #{search_month}
            </when>
            <otherwise>
                and #{search_year} <![CDATA[<=]]> special.select_year
                and special.select_year <![CDATA[<=]]> #{end_year}

                and #{search_month} <![CDATA[<=]]> special.select_month
                and special.select_month <![CDATA[<=]]> #{end_month}
            </otherwise>
        </choose>
        left join rd_data.tb_member_basic basic
        on exchange.mem_no = basic.mem_no
        LEFT JOIN rd_data.tb_member_withdrawal_bak f ON exchange.mem_no = f.mem_no
        LEFT JOIN rd_data.tb_play_maker_mem p ON exchange.mem_no = p.mem_no AND end_date > NOW()
        where exchange.state in ( 2, 4 )
        <choose>
            <when test="end_year == null">
                and DATE_FORMAT(exchange.reg_date , '%Y%m') = concat(#{search_year}, #{search_month})
                and exchange.last_reject = 1
            </when>
            <otherwise>
                and concat(#{search_year}, #{search_month}, #{search_day}) <![CDATA[<=]]> DATE_FORMAT(exchange.last_upd_date, '%Y%m%d')
                and DATE_FORMAT(exchange.last_upd_date, '%Y%m%d') <![CDATA[<=]]> concat(#{end_year}, #{end_month}, #{end_day})
            </otherwise>
        </choose>
        <choose>
            <when test="isSpecial == 0">
                AND special.mem_no IS NULL AND p.mem_no IS NULL
            </when>
            <when test="isSpecial == 1">
                AND special.mem_no IS NOT NULL AND p.mem_no IS NULL
            </when>
            <when test="isSpecial == 2">
                AND p.mem_no IS NOT NULL
            </when>
        </choose>
        <if test='search_testId == 1'>
            and (basic.inner = 0 or f.inner = 0)
        </if>
        )a

        union all
        -- 불가처리 금액
        select ifnull(sum(cash_real), 0) cash_basic
        from rd_data.tb_member_exchange exchange
        left join rd_admin.tb_special_dj special
        on exchange.mem_no = special.mem_no
        <choose>
            <when test="end_year == null">
                and special.select_year = #{search_year}
                and special.select_month = #{search_month}
            </when>
            <otherwise>
                and #{search_year} <![CDATA[<=]]> special.select_year
                and special.select_year <![CDATA[<=]]> #{end_year}

                and #{search_month} <![CDATA[<=]]> special.select_month
                and special.select_month <![CDATA[<=]]> #{end_month}
            </otherwise>
        </choose>
        left join rd_data.tb_member_basic basic
        on exchange.mem_no = basic.mem_no
        LEFT JOIN rd_data.tb_member_withdrawal_bak f ON exchange.mem_no = f.mem_no
        LEFT JOIN rd_data.tb_play_maker_mem p ON exchange.mem_no = p.mem_no AND end_date > NOW()
        where exchange.state in ( 2, 4 )
        <choose>
            <when test="end_year == null">
                and DATE_FORMAT(exchange.reg_date , '%Y%m') = concat(#{search_year}, #{search_month})
                and exchange.last_reject = 1
            </when>
            <otherwise>
                and concat(#{search_year}, #{search_month}, #{search_day}) <![CDATA[<=]]> DATE_FORMAT(exchange.last_upd_date, '%Y%m%d')
                and DATE_FORMAT(exchange.last_upd_date, '%Y%m%d') <![CDATA[<=]]> concat(#{end_year}, #{end_month}, #{end_day})
            </otherwise>
        </choose>
        <choose>
            <when test="isSpecial == 0">
                AND special.mem_no IS NULL AND p.mem_no IS NULL
            </when>
            <when test="isSpecial == 1">
                AND special.mem_no IS NOT NULL AND p.mem_no IS NULL
            </when>
            <when test="isSpecial == 2">
                AND p.mem_no IS NOT NULL
            </when>
        </choose>
        <if test='search_testId == 1'>
            and (basic.inner = 0 or f.inner = 0)
        </if>

        union all
        -- 불가 별 수
        select ifnull(sum(byeol), 0) byeol
        from rd_data.tb_member_exchange exchange
        left join rd_admin.tb_special_dj special
        on exchange.mem_no = special.mem_no
        <choose>
            <when test="end_year == null">
                and special.select_year = #{search_year}
                and special.select_month = #{search_month}
            </when>
            <otherwise>
                and #{search_year} <![CDATA[<=]]> special.select_year
                and special.select_year <![CDATA[<=]]> #{end_year}

                and #{search_month} <![CDATA[<=]]> special.select_month
                and special.select_month <![CDATA[<=]]> #{end_month}
            </otherwise>
        </choose>
        left join rd_data.tb_member_basic basic
        on exchange.mem_no = basic.mem_no

        LEFT JOIN rd_data.tb_member_withdrawal_bak f ON exchange.mem_no = f.mem_no
        LEFT JOIN rd_data.tb_play_maker_mem p ON exchange.mem_no = p.mem_no AND end_date > NOW()
        where exchange.state in ( 2, 4 )
        <choose>
            <when test="end_year == null">
                and DATE_FORMAT(exchange.reg_date , '%Y%m') = concat(#{search_year}, #{search_month})
                and exchange.last_reject = 1
            </when>
            <otherwise>
                and concat(#{search_year}, #{search_month}, #{search_day}) <![CDATA[<=]]> DATE_FORMAT(exchange.last_upd_date, '%Y%m%d')
                and DATE_FORMAT(exchange.last_upd_date, '%Y%m%d') <![CDATA[<=]]> concat(#{end_year}, #{end_month}, #{end_day})
            </otherwise>
        </choose>
        <choose>
            <when test="isSpecial == 0">
                AND special.mem_no IS NULL AND p.mem_no IS NULL
            </when>
            <when test="isSpecial == 1">
                AND special.mem_no IS NOT NULL AND p.mem_no IS NULL
            </when>
            <when test="isSpecial == 2">
                AND p.mem_no IS NOT NULL
            </when>
        </choose>
        <if test='search_testId == 1'>
            and (basic.inner = 0 or f.inner = 0)
        </if>
    </select>

    <select id="selectStatSummaryInfo" parameterType="com.dalbit.money.vo.Mon_ExchangeInputVo" resultType="com.dalbit.money.vo.Mon_ExchangeSummaryOutputVo">
        /* Mon_Exchange.xml - selectSummaryInfo */
        SELECT COUNT(*) cnt, SUM(cash_real) sumCashReal, SUM(byeol) sumByeol
        FROM rd_data.tb_member_exchange exchange
        LEFT JOIN rd_admin.tb_special_dj special ON exchange.mem_no = special.mem_no
        LEFT JOIN rd_data.tb_play_maker_mem p ON exchange.mem_no = p.mem_no AND end_date > NOW()
        WHERE concat(#{search_year}, #{search_month}, #{search_day}) <![CDATA[<=]]> DATE_FORMAT(exchange.reg_date, '%Y%m%d')
        AND DATE_FORMAT(exchange.reg_date, '%Y%m%d') <![CDATA[<=]]> concat(#{end_year}, #{end_month}, #{end_day})
        <choose>
            <when test="isSpecial == 0">
                AND special.mem_no IS NULL AND p.mem_no IS NULL
            </when>
            <when test="isSpecial == 1">
                AND special.mem_no IS NOT NULL AND p.mem_no IS NULL
            </when>
            <when test="isSpecial == 2">
                AND p.mem_no IS NOT NULL
            </when>
        </choose>

        UNION ALL

        SELECT COUNT(*) cnt, SUM(cash_real) sumCashReal, SUM(byeol) sumByeol
        FROM rd_data.tb_member_exchange exchange
        LEFT JOIN rd_admin.tb_special_dj special ON exchange.mem_no = special.mem_no
        LEFT JOIN rd_data.tb_play_maker_mem p ON exchange.mem_no = p.mem_no AND end_date > NOW()
        WHERE (state IN (0, 1, 4) OR (state = 2 AND last_reject = 1))
        AND CONCAT(#{search_year}, #{search_month}, #{search_day}) <![CDATA[<=]]> DATE_FORMAT(exchange.last_upd_date, '%Y%m%d')
        AND DATE_FORMAT(exchange.last_upd_date, '%Y%m%d') <![CDATA[<=]]> concat(#{end_year}, #{end_month}, #{end_day})
        <choose>
            <when test="isSpecial == 0">
                AND special.mem_no IS NULL AND p.mem_no IS NULL
            </when>
            <when test="isSpecial == 1">
                AND special.mem_no IS NOT NULL AND p.mem_no IS NULL
            </when>
            <when test="isSpecial == 2">
                AND p.mem_no IS NOT NULL
            </when>
        </choose>

        UNION ALL

        SELECT COUNT(*) cnt, SUM(cash_real) sumCashReal, SUM(byeol) sumByeol
        FROM rd_data.tb_member_exchange exchange
        LEFT JOIN rd_admin.tb_special_dj special ON exchange.mem_no = special.mem_no
        LEFT JOIN rd_data.tb_play_maker_mem p ON exchange.mem_no = p.mem_no AND end_date > NOW()
        WHERE state IN ( 2, 4 )
        AND CONCAT(#{search_year}, #{search_month}, #{search_day}) <![CDATA[<=]]> DATE_FORMAT(exchange.last_upd_date, '%Y%m%d')
        AND DATE_FORMAT(exchange.last_upd_date, '%Y%m%d') <![CDATA[<=]]> concat(#{end_year}, #{end_month}, #{end_day})
        <choose>
            <when test="isSpecial == 0">
                AND special.mem_no IS NULL AND p.mem_no IS NULL
            </when>
            <when test="isSpecial == 1">
                AND special.mem_no IS NOT NULL AND p.mem_no IS NULL
            </when>
            <when test="isSpecial == 2">
                AND p.mem_no IS NOT NULL
            </when>
        </choose>
    </select>

    <update id="updateLastReject" parameterType="com.dalbit.money.vo.Mon_ExchangeOutputVo">
        /* Mon_Exchange.xml - updateLastReject */
        update rd_data.tb_member_exchange
        set last_reject = 0
        where mem_no = (
            select mem_no
            from rd_data.tb_member_exchange
            where idx = #{idx}
        ) and state in ( 2, 4 )
    </update>

    <sql id="baseUpdateColumn">
        bank_code = #{bank_code}
        , account_name = #{account_name}
        , account_no = #{account_no}
        <!--, social_no = #{social_no} 양과장 요청 완료처리시 update 할때 주민번호는 하지 않도록-->
        , address_1 = #{address_1}
        , address_2 = #{address_2}
        , add_file1 = #{add_file1}
        , add_file2 = #{add_file2}
        , op_msg = #{op_msg}
        , op_name = #{op_name}
        , send_title = #{send_title}
        , send_cont = #{send_cont}
        , send_type = #{send_type}
        , last_upd_date = now()
    </sql>

    <sql id="baseUpdate">
        bank_code = #{bank_code}
        , account_name = #{account_name}
        , account_no = #{account_no}
        , social_no = #{social_no}
        , address_1 = #{address_1}
        , address_2 = #{address_2}
        , add_file1 = #{add_file1}
        , add_file2 = #{add_file2}
        , op_msg = #{op_msg}
        , op_name = #{op_name}
        , send_title = #{send_title}
        , send_cont = #{send_cont}
        , send_type = #{send_type}
        , last_upd_date = now()
    </sql>

    <update id="updateExchangeDetail" parameterType="com.dalbit.money.vo.Mon_ExchangeOutputVo">
        /* Mon_Exchange.xml - updateExchangeDetail */
        update rd_data.tb_member_exchange
        set <include refid="baseUpdate" />
        where idx = #{idx}
    </update>

    <update id="updateExchangeComplete" parameterType="com.dalbit.money.vo.Mon_ExchangeOutputVo">
        /* Mon_Exchange.xml - updateExchangeComplete */
        update rd_data.tb_member_exchange
        set <include refid="baseUpdateColumn" />
        , state = #{state}
        , op_date = now()
        <if test='state == 2'>
            , last_reject = 1
        </if>
        where idx = #{idx}
    </update>

    <update id="updateExchangeMultiComplete" parameterType="com.dalbit.money.vo.Mon_ExchangeInputVo">
        /* Mon_Exchange.xml - updateExchangeMultiComplete */
        update rd_data.tb_member_exchange
        set op_name = #{opName}
        , state = #{state}
        , op_date = now()
        where idx in
        <foreach collection="idxArr" item="idx" separator="," open="(" close=")">
            #{idx}
        </foreach>
    </update>

    <select id="callExchangeCancel" statementType="CALLABLE" parameterType="com.dalbit.common.vo.ProcedureVo" resultType="com.dalbit.common.vo.ProcedureVo">
        call rd_data.sp_member_exchange_cancel(#{data, mode=IN, jdbcType=VARCHAR}, #{ret, mode=OUT, jdbcType=INTEGER}, #{ext, mode=OUT, jdbcType=VARCHAR})
    </select>
    <select id ="testid_historyCnt" parameterType="string" resultType="integer">
        select count(*) as testid_historyCnt from rd_admin.tb_admin_test_account_history where mem_no=#{mem_no}
    </select>

    <sql id="baseEnable">
        select list.*
        from(
            select basic.mem_no
                , basic.mem_userid
                , basic.mem_nick
                , basic.mem_state
                , basic.mem_sex
                , basic.mem_birth_year
                , basic.mem_birth_month
                , basic.mem_birth_day
                , basic.inner
                , (select image_profile from rd_data.tb_member_profile where mem_no=basic.mem_no) as image_profile
                , wallet.gold
                , ifnull(exchange.exchangeCnt, 0) exchangeCnt
                , profile.specialdj_badge specialCnt
                , (select byeol from rd_data.tb_member_exchange where state='1' and mem_no=basic.mem_no order by op_date desc limit 1) AS byeol
                , (select cash_real from rd_data.tb_member_exchange where state='1' and mem_no=basic.mem_no order by op_date desc limit 1) AS cash_real
                , (select op_date from rd_data.tb_member_exchange where state='1' and mem_no=basic.mem_no order by op_date desc limit 1) AS op_date
                , (select op_name from rd_data.tb_member_exchange where state='1' and mem_no=basic.mem_no order by op_date desc limit 1) AS opName
                , (select sum(cash_real) from rd_data.tb_member_exchange where mem_no=basic.mem_no and state=1) AS totalCashReal
            from rd_data.tb_member_basic basic
            inner join rd_data.tb_member_profile profile on basic.mem_no = profile.mem_no
            inner join rd_data.tb_member_wallet wallet on basic.mem_no = wallet.mem_no and 570 <![CDATA[<=]]> wallet.gold
            left outer join (select idx, mem_no, count(*) exchangeCnt from rd_data.tb_member_exchange where state = 1 group by mem_no) exchange on basic.mem_no = exchange.mem_no

            where 570 <![CDATA[<=]]> wallet.gold
            <if test='searchText != null and searchText != ""'>
                <choose>
                    <when test="newSearchType == 1">
                        and basic.mem_no = #{searchText}
                    </when>
                    <when test="newSearchType == 2">
                        and basic.mem_nick like concat('%', #{searchText}, '%')
                    </when>
                    <when test="newSearchType == 3">
                        and basic.mem_name = #{searchText}
                    </when>
                    <when test="newSearchType == 4">
                        and basic.mem_phone = #{searchText}
                    </when>
                    <when test="newSearchType == 5">
                        and basic.mem_userid = #{searchText}
                    </when>
                    <when test="newSearchType == 6">
                        and basic.mem_ip in (SELECT distinct mem_no FROM rd_data.tb_member_session_history WHERE ip = #{searchText})
                    </when>
                    <otherwise>
                        and basic.mem_no in (SELECT distinct mem_no FROM rd_data.tb_member_session_history WHERE device_uuid = #{searchText})
                    </otherwise>
                </choose>
            </if>

            <if test='search_testId == 1'>
                and basic.inner = 0
            </if>
        ) list, (select @RNUM := 0) r
        where 1=1
        <if test='search_exchangeYn == "Y"'>
            and 0 <![CDATA[<]]> list.exchangeCnt
        </if>
        order by list.gold desc
    </sql>

    <select id="selectEnableCnt" parameterType="com.dalbit.money.vo.Mon_ExchangeInputVo" resultType="com.dalbit.money.vo.Mon_EnableOutputVo">
        /* Mon_Exchange.xml - selectEnableCnt */
        select count(*) as enableCnt , sum(gold) as totalGold, sum(specialCnt) as totalSpecialCnt
        from(
        <include refid="baseEnable"/>
        ) a
    </select>

    <select id="selectEnableList" parameterType="com.dalbit.money.vo.Mon_ExchangeInputVo" resultType="com.dalbit.money.vo.Mon_EnableOutputVo">
        /* Mon_Exchange.xml - selectEnableList */
        select *
        from(
            select @RNUM := @RNUM + 1 rowNum
                , list.*
            from (
                <include refid="baseEnable"/>
            ) list
        ) list
        where list.rowNum between #{searchStartNo, jdbcType=INTEGER} and #{searchEndNo, jdbcType=INTEGER}
    </select>

    <select id="totalExchangeCash" parameterType="com.dalbit.money.vo.Mon_ExchangeInputVo" resultType="com.dalbit.money.vo.Mon_EnableOutputVo">
        /* Mon_Exchange.xml - totalExchangeCash */
        select ifnull(sum(cash_basic), 0) totalExchangeAmt
        from rd_data.tb_member_exchange exchange
        left join rd_admin.tb_special_dj special on exchange.mem_no = special.mem_no
        left join rd_data.tb_member_basic basic on exchange.mem_no = basic.mem_no
        where exchange.state = 1
        <if test='search_testId == 1'>
            and basic.inner = 0
        </if>
    </select>

    <select id="selectExchangeCash" parameterType="com.dalbit.money.vo.Mon_ExchangeInputVo" resultType="com.dalbit.money.vo.Mon_EnableOutputVo">
        /* Mon_Exchange.xml - selectExchangeCash */
        select ifnull(count(summary.mem_no), 0) enableCnt
            , ifnull(sum(summary.gold), 0) totalGold
            , exchangeCnt
        from(
            select member.mem_no
                , wallet.gold
                , (select count(mem_no) from rd_data.tb_member_exchange exchange where exchange.mem_no = member.mem_no and exchange.state = 1) exchangeCnt
            from rd_data.tb_member_basic member
            inner join rd_data.tb_member_wallet wallet on member.mem_no = wallet.mem_no and 570 <![CDATA[<=]]> wallet.gold
            inner join rd_data.tb_member_profile profile on member.mem_no = profile.mem_no
            where 570 <![CDATA[<=]]> wallet.gold
            <if test='search_testId == 1'>
                and member.inner = 0
            </if>
            <if test='isSpecial != null and isSpecial != ""'>
                and profile.specialdj_badge = #{isSpecial}
            </if>
        ) summary
        where 1=1
            <if test='search_exchangeYn == "Y"'>
                and 0 <![CDATA[<]]> exchangeCnt
            </if>
    </select>


    <select id="selectExchangeCash2" parameterType="com.dalbit.money.vo.Mon_ExchangeInputVo" resultType="com.dalbit.money.vo.Mon_EnableOutputVo">
        /* Mon_Exchange.xml - selectExchangeCash2 */
         select '1' type ,count(*) AS enableCnt, sum(a.gold) AS totalGold, 'sp' AS memtype
           from ( select mem_no, gold from rd_data.tb_member_wallet where gold <![CDATA[>=]]> 570 ) a
      left join rd_data.tb_member_basic basic on a.mem_no = basic.mem_no
     inner join rd_data.tb_member_profile profile on basic.mem_no = profile.mem_no
          where a.mem_no not in (select mem_no from rd_data.tb_member_exchange where mem_no = a.mem_no)
            and profile.specialdj_badge = 1
            <if test='search_testId == 1'>
                and basic.inner = 0
            </if>
          union
         select '2' type ,count(*) AS enableCnt, sum(a.gold) AS totalGold, 'sp' AS memtype
           from ( select mem_no, gold from rd_data.tb_member_wallet where gold <![CDATA[>=]]> 570 ) a
      left join rd_data.tb_member_basic basic on a.mem_no = basic.mem_no
     inner join rd_data.tb_member_profile profile on basic.mem_no = profile.mem_no
          where a.mem_no in (select mem_no from rd_data.tb_member_exchange where mem_no = a.mem_no)
            and a.mem_no not in (select mem_no From rd_data.tb_member_exchange where reg_date > (SELECT DATE_ADD(NOW(), INTERVAL -3 MONTH)))
            and profile.specialdj_badge = 1
            <if test='search_testId == 1'>
                and basic.inner = 0
            </if>
          union
         select '3' type ,count(*) AS enableCnt, sum(a.gold) AS totalGold, 'sp' AS memtype
           from ( select mem_no, gold from rd_data.tb_member_wallet where gold <![CDATA[>=]]> 570 ) a
      left join rd_data.tb_member_basic basic on a.mem_no = basic.mem_no
     inner join rd_data.tb_member_profile profile on basic.mem_no = profile.mem_no
          where a.mem_no in (select mem_no from rd_data.tb_member_exchange where mem_no = a.mem_no)
            and a.mem_no in (select mem_no From rd_data.tb_member_exchange where reg_date > (SELECT DATE_ADD(NOW(), INTERVAL -3 MONTH)))
            and profile.specialdj_badge = 1
            <if test='search_testId == 1'>
                and basic.inner = 0
            </if>

          union
         select '1' type ,count(*) AS enableCnt, sum(a.gold) AS totalGold, 'no' AS memtype
           from ( select mem_no, gold from rd_data.tb_member_wallet where gold <![CDATA[>=]]> 570 ) a
      left join rd_data.tb_member_basic basic on a.mem_no = basic.mem_no
     inner join rd_data.tb_member_profile profile on basic.mem_no = profile.mem_no
          where a.mem_no not in (select mem_no from rd_data.tb_member_exchange where mem_no = a.mem_no)
            and profile.specialdj_badge = 0
            <if test='search_testId == 1'>
                and basic.inner = 0
            </if>
          union
         select '2' type ,count(*) AS enableCnt, sum(a.gold) AS totalGold, 'no' AS memtype
           from ( select mem_no, gold from rd_data.tb_member_wallet where gold <![CDATA[>=]]> 570 ) a
      left join rd_data.tb_member_basic basic on a.mem_no = basic.mem_no
     inner join rd_data.tb_member_profile profile on basic.mem_no = profile.mem_no
          where a.mem_no in (select mem_no from rd_data.tb_member_exchange where mem_no = a.mem_no)
            and a.mem_no not in (select mem_no From rd_data.tb_member_exchange where reg_date > (SELECT DATE_ADD(NOW(), INTERVAL -3 MONTH)))
            and profile.specialdj_badge = 0
            <if test='search_testId == 1'>
                and basic.inner = 0
            </if>
          union
         select '3' type ,count(*) AS enableCnt, sum(a.gold) AS totalGold, 'no' AS memtype
           from ( select mem_no, gold from rd_data.tb_member_wallet where gold <![CDATA[>=]]> 570 ) a
      left join rd_data.tb_member_basic basic on a.mem_no = basic.mem_no
     inner join rd_data.tb_member_profile profile on basic.mem_no = profile.mem_no
          where a.mem_no in (select mem_no from rd_data.tb_member_exchange where mem_no = a.mem_no)
            and a.mem_no in (select mem_no From rd_data.tb_member_exchange where reg_date > (SELECT DATE_ADD(NOW(), INTERVAL -3 MONTH)))
            and profile.specialdj_badge = 0
            <if test='search_testId == 1'>
                and basic.inner = 0
            </if>
    </select>

    <select id="selectEnableSummary" parameterType="com.dalbit.money.vo.Mon_EnableSummaryVo" resultType="com.dalbit.money.vo.Mon_EnableSummaryVo">
        /*환전내역이 없는 사람*/
        select count(gold) count
            , ifnull(sum(general), 0) general
            , ifnull(sum(special), 0) special
        from(
            select wallet.gold,
                ifnull(case when profile.specialdj_badge = 0 then wallet.gold end,0) general,
                ifnull(case when profile.specialdj_badge > 0 then wallet.gold end,0) special
            from rd_data.tb_member_basic basic
                inner join rd_data.tb_member_profile profile on basic.mem_no = profile.mem_no
                inner join rd_data.tb_member_wallet wallet on basic.mem_no = wallet.mem_no and 570 <![CDATA[<=]]> wallet.gold
                left outer join (select mem_no, max(op_date) lastOpDate
                                    from rd_data.tb_member_exchange
                                    where state = 1
                                    group by mem_no) exchange on basic.mem_no = exchange.mem_no
            where lastOpDate is null
            <if test='search_testId == 1'>
                and basic.inner = 0
            </if>
            <if test='search_exchangeYn == "Y"'>
                and lastOpDate is not null
            </if>
        ) sum

        union all

        /*3개월 내 환전한 회원*/
        select count(gold) count
            , ifnull(sum(general), 0) general
            , ifnull(sum(special), 0) special
        from(
            select wallet.gold,
                ifnull(case when profile.specialdj_badge = 0 then wallet.gold end,0) general,
                ifnull(case when profile.specialdj_badge > 0 then wallet.gold end,0) special
            from rd_data.tb_member_basic basic
                inner join rd_data.tb_member_profile profile on basic.mem_no = profile.mem_no
                inner join rd_data.tb_member_wallet wallet on basic.mem_no = wallet.mem_no and 570 <![CDATA[<=]]> wallet.gold
                left outer join (select mem_no, max(op_date) lastOpDate
                                    from rd_data.tb_member_exchange
                                    where state = 1
                                    group by mem_no) exchange on basic.mem_no = exchange.mem_no
                where lastOpDate is not null
                and lastOpDate <![CDATA[>]]> DATE_SUB(now(), interval 3 month)
                <if test='search_testId == 1'>
                    and basic.inner = 0
                </if>
                <if test='search_exchangeYn == "Y"'>
                    and lastOpDate is not null
                </if>
        ) sum


        union all

        /*3개월 이상 환전하지 않은사람*/
        select count(gold) count
            , ifnull(sum(general), 0) general
            , ifnull(sum(special), 0) special
        from(
            select wallet.gold,
                ifnull(case when profile.specialdj_badge = 0 then wallet.gold end,0) general,
                ifnull(case when profile.specialdj_badge > 0 then wallet.gold end,0) special
            from rd_data.tb_member_basic basic
                inner join rd_data.tb_member_profile profile on basic.mem_no = profile.mem_no
                inner join rd_data.tb_member_wallet wallet on basic.mem_no = wallet.mem_no and 570 <![CDATA[<=]]> wallet.gold
                left outer join (select mem_no, max(op_date) lastOpDate
                                    from rd_data.tb_member_exchange
                                    where state = 1
                                    group by mem_no) exchange on basic.mem_no = exchange.mem_no
                where lastOpDate is not null
                and lastOpDate <![CDATA[<=]]> DATE_SUB(now(), interval 3 month)
                <if test='search_testId == 1'>
                    and basic.inner = 0
                </if>
                <if test='search_exchangeYn == "Y"'>
                    and lastOpDate is not null
                </if>
        ) sum
    </select>

    <select id="callExchangeList" statementType="CALLABLE" parameterType="com.dalbit.common.vo.ProcedureVo" resultType="com.dalbit.money.vo.Mon_ExchangeOutputVo">
        /* M_Member.xml - callExchangeList */
        call rd_admin.sp_admin_member_all_exchange_list(#{data, mode=IN, jdbcType=VARCHAR}, #{ret, mode=OUT, jdbcType=INTEGER}, #{ext, mode=OUT, jdbcType=VARCHAR})
    </select>


    <update id="opdateUpdate" parameterType="com.dalbit.money.vo.Mon_ExchangeOutputVo">
        /* Mon_Exchange.xml - opdateUpdate */
        update rd_data.tb_member_exchange
        set op_date = #{op_date}
          , op_name = #{op_name}
        where idx = #{idx}
    </update>

    <update id="imageUpload" parameterType="com.dalbit.money.vo.Mon_ExchangeOutputVo">
        /* Mon_Exchange.xml - imageUpload */
       update rd_data.tb_member_exchange
          set add_file1 = #{add_file1}
            , add_file2 = #{add_file2}
            , add_file3 = #{add_file3}
            , op_name = #{op_name}
            , last_upd_date = now()
         where idx = #{idx}
    </update>

    <select id="cashRealDetail" parameterType="com.dalbit.money.vo.Mon_ExchangeInputVo" resultType="com.dalbit.money.vo.Mon_ExchangeOutputVo">
        SELECT byeol
               , gold
               , ( gold * 60 ) AS goldAmt
               , silver
               , ( silver * 60 ) AS silverAmt
               , income_tax
               , resident_tax
               , transfer_fee
               , benefit
               , cash_real
          FROM rd_data.tb_member_exchange
         WHERE idx=#{idx};
    </select>
</mapper>