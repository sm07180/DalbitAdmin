<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.dalbit.member.dao.Mem_NoticeDao" >

    <!--<select id="callNoticeHistory" statementType="CALLABLE" parameterType="com.dalbit.common.vo.ProcedureVo" resultType="com.dalbit.member.vo.procedure.P_MemberNoticeOutputVo">-->
        <!--/* Mem_Noticet.xml - callNoticeHistory */-->
        <!--call rd_admin.sp_admin_member_notice_history(#{data, mode=IN, jdbcType=VARCHAR}, #{ret, mode=OUT, jdbcType=INTEGER}, #{ext, mode=OUT, jdbcType=VARCHAR})-->
    <!--</select>-->

    <sql id="storyCondition">
        <if test="searchType == 1">
        select a.idx
                , '1' as type
                , b.mem_no
                , b.mem_nick
                , b.mem_sex
                , b.mem_birth_year
                , b.inner
                ,'-' as room_no
                , a.title
                , a.last_upd_date
                , a.contents
                , a.image_path
                , a.status
                , a.op_name
                , (select count(*)
                    from rd_data.tb_member_broadcast_notice_reply rep
                    where rep.mem_no = a.mem_no and a.idx = rep.notice_no and rep.`status` = 0
                        and a.writer_mem_no not in
                    (select bla.black_mem_no
                        from rd_data.tb_member_broadcast_black bla
                        where bla.mem_no = a.mem_no and bla.black_mem_no <![CDATA[<>]]> rep.writer_no)
                ) as replyCnt
          From rd_data.tb_member_broadcast_notice a
          left join rd_data.tb_member_basic b on a.mem_no = b.mem_no
          LEFT JOIN rd_data.tb_member_withdrawal_bak c ON a.mem_no = c.mem_no
         where CHAR_LENGTH(a.title) > 0
            <if test='mem_no != null and mem_no != ""'>
                <choose>
                    <when test="newSearchType == 1">
                        and (b.mem_no = #{mem_no} or c.mem_no = #{mem_no})
                    </when>
                    <when test="newSearchType == 2">
                        and (b.mem_nick like concat('%', #{mem_no}, '%') or c.mem_nick like concat('%', #{mem_no}, '%'))
                    </when>
                    <when test="newSearchType == 3">
                        and (b.mem_name = #{mem_no} or c.mem_name = #{mem_no})
                    </when>
                    <when test="newSearchType == 4">
                        and (b.mem_phone = #{mem_no} or c.mem_phone = #{mem_no})
                    </when>
                    <when test="newSearchType == 5">
                        and (b.mem_userid = #{mem_no} or c.mem_userid = #{mem_no})
                    </when>
                    <when test="newSearchType == 6">
                        and (b.mem_no in (SELECT distinct mem_no FROM rd_data.tb_member_session_history WHERE ip = #{mem_no})
                           or c.mem_no in (SELECT distinct mem_no FROM rd_data.tb_member_session_history WHERE ip = #{mem_no}))
                    </when>
                    <when test="newSearchType == 7">
                        and (b.mem_no in (SELECT distinct mem_no FROM rd_data.tb_member_session_history WHERE device_uuid = #{mem_no})
                           or c.mem_no in (SELECT distinct mem_no FROM rd_data.tb_member_session_history WHERE device_uuid = #{mem_no}))
                    </when>
                    <otherwise>
                        and ((b.mem_no = #{mem_no} OR b.mem_nick like CONCAT('%',#{mem_no},'%'))
                            or (c.mem_no = #{mem_no} OR c.mem_nick like CONCAT('%',#{mem_no},'%')))
                    </otherwise>
                </choose>
            </if>
            <if test='sDate != null and sDate !=""'>
                and a.last_upd_date between concat(#{sDate}, ' 00:00:00') and concat(#{eDate}, ' 23:59:59')
            </if>
            <if test='status == 1'>
                and a.status = 0
            </if>
            <if test='status == 2'>
                and a.status = 1
            </if>
        </if>

        <if test="searchType == 2">
            select a.idx
                    , '2' as type
                    , b.mem_no
                    , b.mem_nick
                    , b.mem_sex
                    , b.mem_birth_year
                    , b.inner
                    , a.room_no
                    , a.title
                    , a.last_upd_date
                    , a.notice as contents
                    , (select count(*) from rd_data.tb_broadcast_room_edit_history where room_no = a.room_no and edit_contents like '방송방공지변경%') as editCnt
              From rd_data.tb_broadcast_room a
         left join rd_data.tb_member_basic b on a.mem_no = b.mem_no
         LEFT JOIN rd_data.tb_member_withdrawal_bak c ON a.mem_no = c.mem_no
             where CHAR_LENGTH(a.notice) > 0
                <if test='mem_no != null and mem_no != ""'>
                    <choose>
                        <when test="newSearchType == 1">
                            and (b.mem_no = #{mem_no} or c.mem_no = #{mem_no})
                        </when>
                        <when test="newSearchType == 2">
                            and (b.mem_nick like concat('%', #{mem_no}, '%') or c.mem_nick like concat('%', #{mem_no}, '%'))
                        </when>
                        <when test="newSearchType == 3">
                            and (b.mem_name = #{mem_no} or c.mem_name = #{mem_no})
                        </when>
                        <when test="newSearchType == 4">
                            and (b.mem_phone = #{mem_no} or c.mem_phone = #{mem_no})
                        </when>
                        <when test="newSearchType == 5">
                            and (b.mem_userid = #{mem_no} or c.mem_userid = #{mem_no})
                        </when>
                        <when test="newSearchType == 6">
                            and (b.mem_no in (SELECT distinct mem_no FROM rd_data.tb_member_session_history WHERE ip = #{mem_no})
                            or c.mem_no in (SELECT distinct mem_no FROM rd_data.tb_member_session_history WHERE ip = #{mem_no}))
                        </when>
                        <when test="newSearchType == 7">
                            and (b.mem_no in (SELECT distinct mem_no FROM rd_data.tb_member_session_history WHERE device_uuid = #{mem_no})
                            or c.mem_no in (SELECT distinct mem_no FROM rd_data.tb_member_session_history WHERE device_uuid = #{mem_no}))
                        </when>
                        <otherwise>
                            and ((b.mem_no = #{mem_no} OR b.mem_nick like CONCAT('%',#{mem_no},'%'))
                            or (c.mem_no = #{mem_no} OR c.mem_nick like CONCAT('%',#{mem_no},'%')))
                        </otherwise>
                    </choose>
                </if>
                <if test='sDate != null and sDate !=""'>
                    and a.last_upd_date between concat(#{sDate}, ' 00:00:00') and concat(#{eDate}, ' 23:59:59')
                </if>
        </if>
    </sql>

    <select id="callNoticeHistory" parameterType="com.dalbit.member.vo.procedure.P_MemberNoticeInputVo" resultType="com.dalbit.member.vo.procedure.P_MemberNoticeOutputVo">
      select
          @rownum := @rownum + 1 as rowNum,
          c.*
        FROM (
          <include refid="storyCondition"/>
        ) AS c, (select @rownum := #{pageNo} ) AS d
        order by c.last_upd_date desc
        limit #{pageNo}, #{pageCnt}
    </select>

    <select id="callNoticeHistory_totalCnt" parameterType="com.dalbit.member.vo.procedure.P_MemberNoticeInputVo" resultType="integer">
        select count(*) totalCnt
          From (
          <include refid="storyCondition"/>
            ) a
    </select>

    <select id="selectNoticeReply" parameterType="com.dalbit.content.vo.BoardAdmNoticeReplyVo" resultType="com.dalbit.content.vo.BoardAdmNoticeReplyVo">
        select
            '0' as depthType
             , a.idx as idx
             , a.idx as forReplyIdx
             , ifnull(bas.mem_nick, bak.mem_nick) as memNick
             , ifnull(bas.mem_sex, bak.mem_sex) as memSex
             , ifnull(bas.mem_userid, bak.mem_userid) as memUserId
             , a.writer_mem_no as memNo
             , a.contents as contents
             , pro.image_profile as profileImage
             , a.last_upd_date as writeDate
        from rd_data.tb_member_broadcast_notice a
            left outer join rd_data.tb_member_basic bas on a.writer_mem_no = bas.mem_no
            left outer join rd_data.tb_member_withdrawal_bak bak on a.writer_mem_no = bak.mem_no
            inner join rd_data.tb_member_profile pro on a.writer_mem_no = pro.mem_no
        where a.writer_mem_no = #{memNo}
          and a.idx = #{idx}
        union
        select
            '1' as depthType
             , b.notice_no as idx
             , b.idx as forReplyIdx
             , ifnull(bas.mem_nick, bak.mem_nick) as memNick
             , ifnull(bas.mem_sex, bak.mem_sex) as memSex
             , ifnull(bas.mem_userid, bak.mem_userid) as memUserId
             , b.writer_no as memNo
             , b.contents as contents
             , pro.image_profile as profileImage
             , b.last_upd_date as writeDate
        from rd_data.tb_member_broadcast_notice_reply b
             left outer join rd_data.tb_member_basic bas on b.writer_no = bas.mem_no
             left outer join rd_data.tb_member_withdrawal_bak bak on b.writer_no = bak.mem_no
             inner join rd_data.tb_member_profile pro on b.writer_no = pro.mem_no
        where b.mem_no = #{memNo}
          and b.notice_no = #{idx}
          and b.status = 0
        order by writeDate desc
    </select>

    <sql id="noticeReplyCondition">
        <where>
            <if test='start_sel != null and start_sel != ""'>
                nore.last_upd_date between concat(#{start_sel}, ' 00:00:00') and concat(#{end_sel}, ' 23:59:59')
            </if>

            <if test='txt_search != null and txt_search != ""'>
                <choose>
                    <when test="newSearchType == 1">
                        and (bas.mem_no = #{txt_search} or reba.mem_no = #{txt_search})
                    </when>
                    <when test="newSearchType == 2">
                        and (bas.mem_nick like concat('%', #{txt_search}, '%') or reba.mem_nick like concat('%', #{txt_search}, '%'))
                    </when>
                    <when test="newSearchType == 3">
                        and (bas.mem_name = #{txt_search} or reba.mem_name = #{txt_search})
                    </when>
                    <when test="newSearchType == 4">
                        and (bas.mem_phone = #{txt_search} or reba.mem_phone = #{txt_search})
                    </when>
                    <when test="newSearchType == 5">
                        and (bas.mem_userid = #{txt_search} or reba.mem_userid = #{txt_search})
                    </when>
                    <when test="newSearchType == 6">
                        and (bas.mem_no in (SELECT distinct mem_no FROM rd_data.tb_member_session_history WHERE ip = #{txt_search})
                         or reba.mem_no in (SELECT distinct mem_no FROM rd_data.tb_member_session_history WHERE ip = #{txt_search}))
                    </when>
                    <when test="newSearchType == 7">
                        and (bas.mem_no in (SELECT distinct mem_no FROM rd_data.tb_member_session_history WHERE device_uuid = #{txt_search})
                         or reba.mem_no in (SELECT distinct mem_no FROM rd_data.tb_member_session_history WHERE device_uuid = #{txt_search}))
                    </when>
                    <otherwise>
                        and (bas.mem_no = #{txt_search} or bas.mem_nick like concat('%', #{txt_search}, '%'))
                          or (reba.mem_no = #{txt_search} or reba.mem_nick like concat('%', #{txt_search}, '%'))
                    </otherwise>
                </choose>
            </if>
            <if test='replyStatus == 1'>
                and nore.`status` = 0
            </if>
            <if test='replyStatus == 2'>
                and nore.`status` = 1
            </if>
        </where>
    </sql>

    <select id="selectNoticeReplyList" parameterType="com.dalbit.content.vo.BoardAdmNoticeReplyListInputVo" resultType="com.dalbit.content.vo.BoardAdmNoticeReplyListOutputVo">
        select
            @rownum := @rownum + 1 as rowNum
            , a.*
            from (
                select
                noti.idx as idx
                , noti.writer_mem_no as memNo
                , ifnull(bas.mem_nick, bak.mem_nick) as memNick
                , ifnull(bas.mem_sex, bak.mem_sex) as memSex
                , ifnull(bas.mem_userid, bak.mem_userid) as memUserId
                , ifnull(bas.mem_birth_year, bak.mem_birth_year) as memBirthYear
                , noti.contents as contents
                , noti.`status` as status
                , nore.idx as replyIdx
                , nore.writer_no as replyMemNo
                , ifnull(reba.mem_nick, rebak.mem_nick) as replyMemNick
                , ifnull(reba.mem_sex, rebak.mem_sex) as replyMemSex
                , ifnull(reba.mem_userid, rebak.mem_userid) as replyMemUserId
                , ifnull(reba.mem_birth_year, rebak.mem_birth_year) as replyMemBirthYear
                , nore.contents as replyContents
                , nore.`status` as replyStatus
                , nore.last_upd_date as writeDate
                , ifnull(reba.inner, rebak.inner) as replyInner
                from rd_data.tb_member_broadcast_notice noti
                inner join rd_data.tb_member_broadcast_notice_reply nore on noti.idx = nore.notice_no
                left outer join rd_data.tb_member_basic bas on noti.writer_mem_no = bas.mem_no
                left outer join rd_data.tb_member_withdrawal_bak bak on noti.writer_mem_no = bak.mem_no
                left outer join rd_data.tb_member_basic reba on nore.writer_no = reba.mem_no
                left outer join rd_data.tb_member_withdrawal_bak rebak on nore.writer_no = rebak.mem_no
                <include refid="noticeReplyCondition"/>
            ) as a, (select @rownum := #{searchStartLimitNo}) as b
        order by a.writeDate desc
        limit #{searchStartLimitNo}, #{pageCnt}
    </select>

    <select id="selectNoticeReplyListCnt" parameterType="com.dalbit.content.vo.BoardAdmNoticeReplyListInputVo" resultType="integer">
        select
            count (*)
        from rd_data.tb_member_broadcast_notice noti
            inner join rd_data.tb_member_broadcast_notice_reply nore on noti.idx = nore.notice_no
            left outer join rd_data.tb_member_basic bas on noti.writer_mem_no = bas.mem_no
            left outer join rd_data.tb_member_withdrawal_bak bak on noti.writer_mem_no = bak.mem_no
            left outer join rd_data.tb_member_basic reba on nore.writer_no = reba.mem_no
            left outer join rd_data.tb_member_withdrawal_bak rebak on nore.writer_no = rebak.mem_no
            <include refid="noticeReplyCondition"/>
    </select>

    <update id="deleteNoticeReplyList" parameterType="com.dalbit.content.vo.BoardAdmNoticeReplyDeleteVo">
        update rd_data.tb_member_broadcast_notice_reply
            set status = #{status}
                , opName = #{opName}
            where idx = #{replyIdx}
    </update>

    <select id="selectNoticeSummary" parameterType="com.dalbit.member.vo.procedure.P_MemberNoticeInputVo" resultType="com.dalbit.member.vo.procedure.P_MemberNoticeOutputVo">
        select count(*) totalCnt
                ,sum(if(mem_sex = 'm',1,0)) as maleCnt
                ,sum(if(mem_sex = 'f',1,0)) as femaleCnt
                ,sum(if(mem_sex = 'n',1,0)) as noneCnt
          From (
          <include refid="storyCondition"/>
            ) a
    </select>

    <select id="selectNoticeReplyListSummary" parameterType="com.dalbit.content.vo.BoardAdmNoticeReplyListInputVo" resultType="com.dalbit.content.vo.BoardAdmNoticeReplyListOutputVo">
        select count(*) as summaryTotalCnt
            , sum(if((select mem_sex from rd_data.tb_member_basic where mem_no = nore.writer_no) = 'm', 1, 0)) as maleCnt
            , sum(if((select mem_sex from rd_data.tb_member_basic where mem_no = nore.writer_no) = 'f', 1, 0)) as femaleCnt
            , sum(if((select mem_sex from rd_data.tb_member_basic where mem_no = nore.writer_no) = 'n', 1, 0)) as noneCnt
        from rd_data.tb_member_broadcast_notice noti
            inner join rd_data.tb_member_broadcast_notice_reply nore on noti.idx = nore.notice_no
            left outer join rd_data.tb_member_basic bas on noti.writer_mem_no = bas.mem_no
            left outer join rd_data.tb_member_withdrawal_bak bak on noti.writer_mem_no = bak.mem_no
            left outer join rd_data.tb_member_basic reba on nore.writer_no = reba.mem_no
            left outer join rd_data.tb_member_withdrawal_bak rebak on nore.writer_no = rebak.mem_no
        <include refid="noticeReplyCondition"/>
    </select>

    <update id="callMemberNoticeDelete" parameterType="com.dalbit.member.vo.procedure.P_MemberNoticeDeleteVo">
         update rd_data.tb_member_broadcast_notice set status=#{noticeType}, op_name = #{opName} where idx=#{noticeIdx}
    </update>


    <select id="callBroadBeforNotice" parameterType="com.dalbit.member.vo.procedure.P_MemberNoticeDeleteVo" resultType="com.dalbit.member.vo.procedure.P_MemberNoticeOutputVo">
        select notice as contents FROM rd_data.tb_broadcast_room WHERE room_no = #{roomNo}
    </select>

    <update id="callBroadNoticeDelete" parameterType="com.dalbit.member.vo.procedure.P_MemberNoticeDeleteVo">
         update rd_data.tb_broadcast_room set notice='', last_upd_date = now() where idx=#{noticeIdx}
    </update>

</mapper>
