<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.dalbit.member.dao.Mem_MemberDao" >

    <select id="getMemberInfo" parameterType="string" resultType="com.dalbit.member.vo.MemberVo">
        select a.mem_no,a.mem_id,a.mem_passwd,a.mem_phone,a.mem_nick,a.mem_userid,a.mem_name,a.mem_email,a.foreign_yn,a.mem_sex
                ,a.mem_birth_year,a.mem_birth_month,a.mem_birth_day,a.mem_slct,a.mem_adid,a.mem_state,a.block_type,a.block_day,a.block_end_date
                ,a.mem_join_date,a.join_path,a.os_type,a.location,a.ip,a.inner,b.day_badge,b.week_badge,b.month_badge,b.recomm_badge,b.newdj_badge
                ,b.new_badge,b.specialdj_badge,b.admin_badge,b.shiningdj_badge,b.specialdj_cnt,b.image_profile
          from rd_data.tb_member_basic a
	 LEFT JOIN rd_data.tb_member_profile b ON a.mem_no = b.mem_no
         where a.mem_no=#{mem_no}
        union
        select a.mem_no,a.mem_id,a.mem_passwd,a.mem_phone,a.mem_nick,a.mem_userid,a.mem_name,a.mem_email,a.foreign_yn,a.mem_sex
                ,a.mem_birth_year,a.mem_birth_month,a.mem_birth_day,a.mem_slct,a.mem_adid,a.mem_state,a.block_type,a.block_day,a.block_end_date
                ,a.mem_join_date,a.join_path,a.os_type,a.location,a.ip,a.inner,b.day_badge,b.week_badge,b.month_badge,b.recomm_badge,b.newdj_badge
                ,b.new_badge,b.specialdj_badge,b.admin_badge,b.shiningdj_badge,b.specialdj_cnt,b.image_profile
          FROM rd_data.tb_member_withdrawal_bak a
	 LEFT JOIN rd_data.tb_member_profile b ON a.mem_no = b.mem_no
	     WHERE a.mem_no=#{mem_no}
        limit 1
    </select>

    <select id="callMemberLogin" statementType="CALLABLE" parameterType="com.dalbit.common.vo.ProcedureVo" resultType="com.dalbit.common.vo.ProcedureVo">
        call rd_data.sp_member_login(#{data, mode=IN, jdbcType=VARCHAR}, #{ret, mode=OUT, jdbcType=INTEGER}, #{ext, mode=OUT, jdbcType=VARCHAR})
    </select>

    <select id="callMemberList" statementType="CALLABLE" parameterType="com.dalbit.common.vo.ProcedureVo" resultType="com.dalbit.member.vo.procedure.P_MemberListOutputVo">
        /* M_Member.xml - callMemberList */
        call rd_admin.sp_admin_member_all_search(#{data, mode=IN, jdbcType=VARCHAR}, #{ret, mode=OUT, jdbcType=INTEGER}, #{ext, mode=OUT, jdbcType=VARCHAR})
    </select>

    <select id="callMemberInfo" statementType="CALLABLE" parameterType="com.dalbit.common.vo.ProcedureVo" resultType="com.dalbit.member.vo.procedure.P_MemberInfoOutputVo">
        /* M_Member.xml - callMemberInfo */
        call rd_admin.sp_admin_member_all_info_detail(#{data, mode=IN, jdbcType=VARCHAR}, #{ret, mode=OUT, jdbcType=INTEGER}, #{ext, mode=OUT, jdbcType=VARCHAR})
    </select>

    <select id="callMemberCertification" parameterType="com.dalbit.member.vo.procedure.P_MemberInfoInputVo" resultType="com.dalbit.member.vo.procedure.P_MemberInfoOutputVo">
        /* M_Member.xml - callMemberCertification */
        select comm_company, parents_agree_yn, recant_yn from rd_data.tb_member_certification where mem_no=#{mem_no}
    </select>

    <select id="callMemberCertificationBak" parameterType="com.dalbit.member.vo.procedure.P_MemberInfoInputVo" resultType="com.dalbit.member.vo.procedure.P_MemberInfoOutputVo">
        /* M_Member.xml - callMemberCertificationBak */
        select comm_company, parents_agree_yn, recant_yn from rd_data.tb_member_certification_bak where mem_no=#{mem_no}
    </select>

    <select id="callMemberTestId" parameterType="com.dalbit.member.vo.procedure.P_MemberInfoInputVo" resultType="com.dalbit.member.vo.procedure.P_MemberInfoOutputVo">
        /* M_Member.xml - callMemberTestId */
        select `inner` from rd_data.tb_member_basic where mem_no =#{mem_no}
        union
        select `inner` from rd_data.tb_member_withdrawal_bak where mem_no =#{mem_no}
    </select>

    <select id="callMemberRoom" parameterType="com.dalbit.member.vo.procedure.P_MemberInfoInputVo" resultType="com.dalbit.member.vo.procedure.P_MemberInfoOutputVo">
        /* M_Member.xml - callMemberRoom */
        select room_no,title, type_media from rd_data.tb_broadcast_room where state != 4 and mem_no =#{mem_no}
    </select>

    <select id="callMemberRoomListen" parameterType="com.dalbit.member.vo.procedure.P_MemberInfoInputVo" resultType="com.dalbit.member.vo.procedure.P_MemberInfoOutputVo">
        /* M_Member.xml - callMemberRoomListen */
        select a.room_no as listen_room_no
               ,b.title as listen_title
          from rd_data.tb_broadcast_room_member a
          inner join rd_data.tb_broadcast_room b on a.room_no = b.room_no
         where a.mem_no=#{mem_no}
           and a.state=0
           and a.auth != 3
           /*and b.state != 4*/
         order by a.last_upd_date desc
         limit 1;
    </select>

    <select id="callMemberInfo_badge" parameterType="String" resultType="java.util.HashMap">
        select if(day_badge = 1, 1, 0) as day_badge
                , if(week_badge = 1, 1, 0) as week_badge
                , if(month_badge = 1, 1, 0) as month_badge
                , if(recomm_badge = 1, 1, 0) as recomm_badge
                , if(newdj_badge = 1, 1, 0) as newdj_badge
                , if(new_badge = 1, 1, 0) as new_badge
                , specialdj_badge as specialdj_badge
                , if(admin_badge = 1, 1, 0) as admin_badge
           from rd_data.tb_member_profile where mem_no=#{mem_no}
    </select>

    <select id="callMemberBlock" parameterType="com.dalbit.member.vo.procedure.P_MemberInfoInputVo" resultType="com.dalbit.member.vo.procedure.P_MemberInfoOutputVo">
        /* M_Member.xml - callMemberBlock */
        select block_day,block_end_date, block_type From rd_data.tb_member_basic where mem_no=#{mem_no}
         union
        select block_day,block_end_date, block_type From rd_data.tb_member_withdrawal_bak where mem_no=#{mem_no}
    </select>

    <select id="callNickNameCheck" statementType="CALLABLE" parameterType="com.dalbit.common.vo.ProcedureVo" resultType="com.dalbit.common.vo.ProcedureVo">
        /* M_Member.xml - callNickNameCheck */
      call rd_data.sp_checkDuplicateNickName(#{nickName, mode=IN, jdbcType=VARCHAR}, #{ret, mode=OUT, jdbcType=INTEGER}, #{ext, mode=OUT, jdbcType=VARCHAR})
    </select>

    <select id="callMemberEditHistory" statementType="CALLABLE" parameterType="com.dalbit.common.vo.ProcedureVo" resultType="com.dalbit.member.vo.procedure.P_MemberEditHistOutputVo">
        /* M_Member.xml - callMemberEditHistory */
        call rd_admin.sp_admin_member_all_info_edit_history(#{data, mode=IN, jdbcType=VARCHAR}, #{ret, mode=OUT, jdbcType=INTEGER}, #{ext, mode=OUT, jdbcType=VARCHAR})
    </select>

    <select id="callMemberRoomEditHistoryCnt" parameterType="com.dalbit.member.vo.procedure.P_MemberEditHistInputVo" resultType="java.lang.Integer">
        SELECT
            COUNT(*)
        FROM rd_data.tb_broadcast_room_edit_history
        WHERE
           room_no IN ( SELECT room_no FROM rd_data.tb_broadcast_room WHERE mem_no = #{mem_no})
           <choose>
               <when test="searchType == 1">
                   AND edit_contents LIKE concat('%',#{searchText},'%')
               </when>
               <when test="searchType == 2">
                   AND edit_contents NOT REGEXP #{searchText}
               </when>
           </choose>
    </select>

    <select id="callMemberRoomEditHistory" parameterType="com.dalbit.member.vo.procedure.P_MemberEditHistInputVo" resultType="com.dalbit.broadcast.vo.procedure.P_BroadcastEditHistOutputVo">
        SELECT
            @rownum := @rownum + 1 as rowNum,
            a.*
        FROM
        (
            SELECT
                last_upd_date AS editDate
                , edit_contents AS editContents
                , op_name AS opName
             FROM rd_data.tb_broadcast_room_edit_history
             WHERE
                room_no IN ( SELECT room_no FROM rd_data.tb_broadcast_room WHERE mem_no = #{mem_no})
                <choose>
                    <when test="searchType == 1">
                        AND edit_contents LIKE concat('%',#{searchText},'%')
                    </when>
                    <when test="searchType == 2">
                        AND edit_contents NOT REGEXP #{searchText}
                    </when>
                </choose>
            ORDER BY last_upd_date DESC
            LIMIT #{pageStart}, #{pageCnt}
        ) AS a
        , (SELECT @rownum := #{pageStart} ) AS b

    </select>

    <select id="callMemberClipEditHistoryCnt" parameterType="com.dalbit.member.vo.procedure.P_MemberEditHistInputVo" resultType="java.lang.Integer">
        SELECT
            COUNT(*)
        FROM rd_data.tb_cast_room_edit_history
        WHERE
        cast_no IN ( SELECT cast_no FROM rd_data.tb_cast_room WHERE mem_no = #{mem_no})
           <choose>
               <when test="searchType == 1">
                   AND edit_contents LIKE concat('%',#{searchText},'%')
               </when>
               <when test="searchType == 2">
                   AND edit_contents NOT REGEXP #{searchText}
               </when>
           </choose>
    </select>

    <select id="callMemberClipEditHistory" parameterType="com.dalbit.member.vo.procedure.P_MemberEditHistInputVo" resultType="com.dalbit.broadcast.vo.procedure.P_BroadcastEditHistOutputVo">
        SELECT
            @rownum := @rownum + 1 as rowNum,
            a.*
        FROM
        (
            SELECT
                last_upd_date AS editDate
                , edit_contents AS editContents
                , op_name AS opName
             FROM rd_data.tb_cast_room_edit_history
             WHERE
                cast_no IN ( SELECT cast_no FROM rd_data.tb_cast_room WHERE mem_no = #{mem_no})
                <choose>
                    <when test="searchType == 1">
                        AND edit_contents LIKE concat('%',#{searchText},'%')
                    </when>
                    <when test="searchType == 2">
                        AND edit_contents NOT REGEXP #{searchText}
                    </when>
                </choose>
            ORDER BY last_upd_date DESC
            LIMIT #{pageStart}, #{pageCnt}
        ) AS a
        , (SELECT @rownum := #{pageStart} ) AS b

    </select>

    <select id="callMemberPointHistory" parameterType="com.dalbit.member.vo.procedure.P_MemberEditHistInputVo" resultType="com.dalbit.member.vo.procedure.P_MemberEditHistOutputVo">
        /* M_Member.xml - callMemberPointHistory */
        select @rownum := @rownum + 1 as rowNum, a.*
          FROM (SELECT last_upd_date AS editDate,
                       edit_contents AS editContents,
                       op_name       AS opName
                  FROM rd_data.tb_member_profile_edit_history
                 where `type` = 1 and mem_no=#{mem_no}
               ) a , (select @rownum := #{pageNo} ) AS b
         ORDER BY a.editDate DESC
         limit #{pageNo}, #{pageCnt}
    </select>

    <select id="callMemberPointHistory_totalCnt" parameterType="com.dalbit.member.vo.procedure.P_MemberEditHistInputVo" resultType="integer">
        /* M_Member.xml - callMemberPointHistory_totalCnt */
       SELECT count(*) as totalCnt FROM rd_data.tb_member_profile_edit_history where `type` = 1 and mem_no=#{mem_no}
    </select>

    <select id="callMemberEditor" statementType="CALLABLE" parameterType="com.dalbit.common.vo.ProcedureVo" resultType="com.dalbit.common.vo.ProcedureVo">
        /* M_Member.xml - callMemberEditor */
        call rd_admin.sp_admin_member_info_edit(#{data, mode=IN, jdbcType=VARCHAR}, #{ret, mode=OUT, jdbcType=INTEGER}, #{ext, mode=OUT, jdbcType=VARCHAR})
    </select>

    <select id="callMemberSocialIdCheck" parameterType="com.dalbit.member.vo.procedure.P_MemberEditorVo" resultType="integer">
        /* M_Member.xml - callMemberEditor */
        SELECT
            IF(count(*) != 0, count(*), (SELECT count(*) FROM rd_data.tb_member_withdrawal_bak WHERE upper(mem_id)=upper(#{socialId}))) AS cnt
        FROM
            rd_data.tb_member_basic
        WHERE
            upper(mem_id)=upper(#{socialId});
    </select>

    <update id="callMemberSocialIdEditor" parameterType="com.dalbit.member.vo.procedure.P_MemberEditorVo">
        /* M_Member.xml - callMemberSocialIdEditor */
        update rd_data.tb_member_basic set mem_id=#{socialId} where mem_no=#{mem_no}
    </update>
    <insert id="callMemberEditHistoryAdd" parameterType="com.dalbit.member.vo.procedure.P_MemberEditorVo">
        /* M_Member.xml - callMemberEditHistoryAdd */
        insert into rd_data.tb_member_profile_edit_history( mem_no, edit_contents, op_name, last_upd_date,type ) values ( #{mem_no}, #{editContents}, #{opName}, now(),#{type})
    </insert>

    <!-- 회원상태 정상 변경 -->
    <update id="callMemberStateEditor" parameterType="com.dalbit.member.vo.procedure.P_MemberEditorVo">
        /* M_Member.xml - callMemberStateEditor */
        <selectKey keyProperty="memState" resultType="String" order="BEFORE">
            SELECT mem_state FROM rd_data.tb_member_basic WHERE mem_no=#{mem_no}
        </selectKey>
        update rd_data.tb_member_basic set mem_state=1, block_day=0, block_end_date=null where mem_no=#{mem_no}
    </update>
    <delete id="callMemberWithdrawal_del" parameterType="com.dalbit.member.vo.procedure.P_MemberEditorVo">
        /* M_Member.xml - callMemberWithdrawal_del */
        delete From rd_data.tb_member_withdrawal where mem_no=#{mem_no}
    </delete>
    <insert id="callMemberBasicAdd" parameterType="com.dalbit.member.vo.procedure.P_MemberEditorVo">
        /* M_Member.xml - callMemberBasicAdd */
        insert into rd_data.tb_member_basic (select * from rd_data.tb_member_withdrawal_bak where mem_no=#{mem_no})
    </insert>
    <delete id="callMemberWithdrawal_bak_del" parameterType="com.dalbit.member.vo.procedure.P_MemberEditorVo">
        /* M_Member.xml - callMemberWithdrawal_bak_del */
        delete From rd_data.tb_member_withdrawal_bak where mem_no=#{mem_no}
    </delete>
    <!-- 회원상태 정상 변경 -->


    <!-- 정지/탈퇴 (신고) -->
    <insert id="callMemberReport" parameterType="com.dalbit.member.vo.procedure.P_MemberReportVo">
        /* M_Member.xml - callMemberReport */
        <selectKey keyProperty="idx" resultType="int" order="AFTER">
            SELECT LAST_INSERT_ID()
        </selectKey>
        insert into rd_data.tb_member_report
                      (mem_no,mem_userid,mem_nick,mem_phone,mem_level,mem_grade,reported_mem_no,reported_userid,
                      reported_nick,reported_phone,reported_level,reported_grade,room_no,reason,etc,status,op_code,
                      op_msg,platform,browser,ip,op_name,op_date,reg_date)
         value (#{mem_no},#{mem_userid},#{mem_nick},'',1,'',#{reported_mem_no},#{reported_userid},
                #{reported_nick},#{reported_phone},#{reported_level},#{reported_grade},null,#{slctReason},null,'2',#{slctType},
                IFNULL(#{notiContents},''),'PC',#{browser},IFNULL(#{ip},''),#{opName},now(),now())
    </insert>

    <select id="callMemberBroadCasting_check" parameterType="com.dalbit.member.vo.procedure.P_MemberReportVo" resultType="integer">
        /* M_Member.xml - callMemberEditor */
        /* 방송중 상태 count */
        select count(*) as cnt from rd_data.tb_broadcast_room where mem_no = #{mem_no} and state != 4
    </select>

    <select id="callMemberListening_check" parameterType="com.dalbit.member.vo.procedure.P_MemberReportVo" resultType="integer">
        /* M_Member.xml - callMemberListening_check */
        /* 청취중 상태 count */
        select count(*) from rd_data.tb_broadcast_room_member where mem_no=#{mem_no} and state=0
    </select>

    <update id="callMemberBasicReport_Edit" parameterType="com.dalbit.member.vo.procedure.P_MemberReportVo">
        /* M_Member.xml - callMemberBasicReport_Edit */
        update rd_data.tb_member_basic
          <if test='slctType lt 3'>                      <!-- <  -->
              set mem_state = #{slctType}
          </if>
          <if test="slctType gt 2 and slctType lt 6">    <!--  >   <  -->
              set mem_state = 3,
                  block_type = 0,
                  block_day = #{blockDay},
                  block_end_date = DATE_ADD( now(), interval #{blockDay} day)
          </if>
          <if test="slctType == 6">
              set mem_state = 5
                , block_type = 0
          </if>
          <if test="slctType == 7">
              set mem_state = 4
                , block_type = 0
          </if>
          <if test="slctType == 8">
              set mem_state = 5
                , block_type = 1

          </if>
        where mem_no = #{reported_mem_no}
    </update>
    <insert id="callMemberWithdrawal_Add" parameterType="com.dalbit.member.vo.procedure.P_MemberReportVo">
        /* M_Member.xml - callMemberWithdrawal_Add */
        insert into rd_data.tb_member_withdrawal( mem_no, state, op_name) values ( #{reported_mem_no}, 2, #{opName})
    </insert>
    <insert id="callMemberNotification_Add" parameterType="com.dalbit.member.vo.procedure.P_MemberReportVo">
        /* M_Member.xml - callMemberNotification_Add */
        insert into rd_data.tb_member_notification( mem_no, type_noti, contents, memo, target_mem_no, room_no, link  )
        values ( #{reported_mem_no}
              , IFNULL(#{type_noti},70)
              , (select REPLACE(REPLACE(#{notiContents}
                , '%%mem_name%%',(select ifnull(mem_name,mem_nick) from rd_data.tb_member_basic where mem_no=#{reported_mem_no}))
                , '%%mem_nick%%',(select mem_nick from rd_data.tb_member_basic where mem_no=#{reported_mem_no})))
              , (select REPLACE(REPLACE(#{notimemo}
                , '%%mem_name%%',(select ifnull(mem_name,mem_nick) from rd_data.tb_member_basic where mem_no=#{reported_mem_no}))
                , '%%mem_nick%%',(select mem_nick from rd_data.tb_member_basic where mem_no=#{reported_mem_no})))
              , IFNULL(#{targetMemNo}, #{reported_mem_no})
              , IFNULL(#{targetRoomNo}, IFNULL(#{targetBoardIdx}, NULL))
              , IFNULL(#{targetRedirectUrl}, NULL)
        )
    </insert>

    <insert id="callMemberNotification_Add_ALL" parameterType="com.dalbit.member.vo.procedure.P_MemberReportVo">
        insert into rd_data.tb_member_notification
            ( mem_no, type_noti, contents, memo, target_mem_no, room_no, link  )
            SELECT
                a.mem_no
                , IFNULL(#{type_noti},70)
                , (select REPLACE(REPLACE(#{notiContents}
                    , '%%mem_name%%',(select ifnull(mem_name,mem_nick) from rd_data.tb_member_basic where mem_no=a.mem_no))
                    , '%%mem_nick%%',(select mem_nick from rd_data.tb_member_basic where mem_no=a.mem_no)))
                , (select REPLACE(REPLACE(#{notimemo}
                    , '%%mem_name%%',(select ifnull(mem_name,mem_nick) from rd_data.tb_member_basic where mem_no=a.mem_no))
                    , '%%mem_nick%%',(select mem_nick from rd_data.tb_member_basic where mem_no=a.mem_no)))
                , IFNULL(#{targetMemNo}, #{reported_mem_no})
                , IFNULL(#{targetRoomNo}, IFNULL(#{targetBoardIdx}, NULL))
                , IFNULL(#{targetRedirectUrl}, NULL)
            FROM
            (
                SELECT
                    a.mem_no, b.all_ok, b.set_1, b.set_2, b.set_3, b.set_4, b.set_5, b.set_6, b.set_7
                FROM
                    rd_data.tb_member_stmp_token AS a
                    INNER JOIN rd_data.tb_member_setting AS b ON a.mem_no = b.mem_no
                    INNER JOIN rd_data.tb_member_basic AS c ON a.mem_no = c.mem_no
                WHERE
                    length(a.device_token) > 0
                    <if test=" slctOs != null and slctOs != '' ">
                        AND a.os_type = #{slctOs}
                    </if>
            ) AS a
        <!--
            <where>
                <choose>
                    <when test="push_slct == 11">
                        a.set_1 = 1
                    </when>
                    <when test="push_slct == 18">
                        a.set_2 = 1
                    </when>
                    <when test="push_slct == 16">
                        a.set_3 = 1
                    </when>
                    <when test="push_slct == 17">
                        a.set_4 = 1
                    </when>
                    <when test="push_slct == 15 or push_slct == 61">
                        a.set_5 = 1
                    </when>
                    <when test="push_slct == 60">
                        a.set_6 = 1
                    </when>
                    <when test="push_slct == 51 or push_slct == 59 or push_slct == 92 or push_slct == 93 or push_slct == 94">
                        a.set_7 = 1
                    </when>
                    <otherwise>
                        a.all_ok = 1
                    </otherwise>
                </choose>
            </where>
            -->
    </insert>
    <insert id="callMemberWithdrawal_bak_Add" parameterType="com.dalbit.member.vo.procedure.P_MemberEditorVo">
        /* M_Member.xml - callMemberBasicAdd */
        insert into rd_data.tb_member_withdrawal_bak (select * from rd_data.tb_member_basic where mem_no=#{reported_mem_no})
    </insert>
    <delete id="callMemberBasic_del" parameterType="com.dalbit.member.vo.procedure.P_MemberEditorVo">
        /* M_Member.xml - callMemberWithdrawal_bak_del */
        delete From rd_data.tb_member_basic where mem_no=#{reported_mem_no}
    </delete>
    <delete id="callMemberWithdrawal_fanDel" parameterType="com.dalbit.member.vo.procedure.P_MemberReportVo">
        /* M_Member.xml - callMemberWithdrawal_fanDel */
        delete FROM rd_data.tb_member_fanstar WHERE mem_no_fan = #{reported_mem_no}
    </delete>
    <delete id="callMemberWithdrawal_starDel" parameterType="com.dalbit.member.vo.procedure.P_MemberReportVo">
        /* M_Member.xml - callMemberWithdrawal_starDel */
        delete FROM rd_data.tb_member_fanstar WHERE mem_no_star = #{reported_mem_no}
    </delete>
    <!-- 정지/탈퇴 (신고) -->


    <!-- 자세히보기 -->
    <select id="callMemAdminMemoAdd" statementType="CALLABLE" parameterType="com.dalbit.common.vo.ProcedureVo" resultType="com.dalbit.common.vo.ProcedureVo">
        /* M_Member.xml - callMemberAdminMemoAdd */
        call rd_admin.sp_admin_op_memo_add(#{data, mode=IN, jdbcType=VARCHAR}, #{ret, mode=OUT, jdbcType=INTEGER}, #{ext, mode=OUT, jdbcType=VARCHAR})
    </select>
    <select id="callMemAdminMemoList" statementType="CALLABLE" parameterType="com.dalbit.common.vo.ProcedureVo" resultType="com.dalbit.member.vo.procedure.P_MemberAdminMemoListOutputVo">
        /* M_Member.xml - callMemAdminMemoList */
        call rd_admin.sp_admin_op_memo_all_select(#{data, mode=IN, jdbcType=VARCHAR}, #{ret, mode=OUT, jdbcType=INTEGER}, #{ext, mode=OUT, jdbcType=VARCHAR})
    </select>
    <!-- 운영자 메모 삭제하기 -->
    <delete id="callMemAdminMemoDel" parameterType="com.dalbit.member.vo.procedure.P_MemberAdminMemoDelVo">
        /* M_Member.xml - callMemAdminMemoDel */
        delete
          from rd_admin.tb_admin_op_memo
         <where>
            <foreach collection="delList" item="item" separator=" OR ">
                (mem_no=#{item.memNo} AND idx = #{item.idx})
            </foreach>
         </where>

    </delete>


    <select id="callMemConnect" statementType="CALLABLE" parameterType="com.dalbit.common.vo.ProcedureVo" resultType="com.dalbit.member.vo.procedure.P_MemberConnectOutputVo">
        /* M_Member.xml - callMemConnect */
        call rd_admin.sp_admin_member_info_connect(#{data, mode=IN, jdbcType=VARCHAR}, #{ret, mode=OUT, jdbcType=INTEGER}, #{ext, mode=OUT, jdbcType=VARCHAR})
    </select>

    <select id="callMemManagerList" statementType="CALLABLE" parameterType="com.dalbit.common.vo.ProcedureVo" resultType="com.dalbit.member.vo.procedure.P_MemberManagerListOutputVo">
        /* M_Member.xml - callMemManagerList */
        <!--call rd_admin.sp_admin_member_info_manager(#{data, mode=IN, jdbcType=VARCHAR}, #{ret, mode=OUT, jdbcType=INTEGER}, #{ext, mode=OUT, jdbcType=VARCHAR})-->
        call rd_admin.sp_admin_member_all_info_manager(#{data, mode=IN, jdbcType=VARCHAR}, #{ret, mode=OUT, jdbcType=INTEGER}, #{ext, mode=OUT, jdbcType=VARCHAR})
    </select>
    <select id="callMemBlackList" statementType="CALLABLE" parameterType="com.dalbit.common.vo.ProcedureVo" resultType="com.dalbit.member.vo.procedure.P_MemberBlackListOutputVo">
        /* M_Member.xml - callMemBlackList */
        <!--call rd_admin.sp_admin_member_info_black(#{data, mode=IN, jdbcType=VARCHAR}, #{ret, mode=OUT, jdbcType=INTEGER}, #{ext, mode=OUT, jdbcType=VARCHAR})-->
        call rd_admin.sp_admin_member_all_info_black(#{data, mode=IN, jdbcType=VARCHAR}, #{ret, mode=OUT, jdbcType=INTEGER}, #{ext, mode=OUT, jdbcType=VARCHAR})
    </select>

    <!-- 달추가 -->
    <select id="callMemberBeforDelCnt" parameterType="com.dalbit.member.vo.procedure.P_MemberEditorVo" resultType="integer">
        /* M_Member.xml - callMemberBeforDelCnt */
        SELECT ruby as beforDalCnt FROM rd_data.tb_member_wallet WHERE mem_no = #{mem_no}
    </select>
    <update id="callMemberAddDal" parameterType="com.dalbit.member.vo.procedure.P_MemberEditorVo">
        /* M_Member.xml - callMemberAddDal */
        UPDATE rd_data.tb_member_wallet SET ruby = #{afterDalCnt} WHERE mem_no = #{mem_no}
    </update>

    <insert id="callMemberAddDal_history" parameterType="com.dalbit.member.vo.procedure.P_MemberEditorVo">
        /* M_Member.xml - callMemberBasicAdd */
        INSERT INTO rd_data.tb_member_wallet_ruby( mem_no, `type`, use_contents, ruby, ruby_old, ruby_new, op_name ) VALUES ( #{mem_no}, IFNULL(#{type}, 11), #{use_contents}, #{addDalCnt}, #{beforDalCnt}, #{afterDalCnt}, #{opName});
    </insert>

    <!-- 별추가 -->
    <select id="callMemberBeforByeolCnt" parameterType="com.dalbit.member.vo.procedure.P_MemberEditorVo" resultType="integer">
        /* M_Member.xml - callMemberBeforByeolCnt */
        SELECT gold as beforDalCnt FROM rd_data.tb_member_wallet WHERE mem_no = #{mem_no}
    </select>
    <update id="callMemberAddByeol" parameterType="com.dalbit.member.vo.procedure.P_MemberEditorVo">
        /* M_Member.xml - callMemberAddByeol */
        UPDATE rd_data.tb_member_wallet SET gold = #{afterByeolCnt} WHERE mem_no = #{mem_no}
    </update>
    <insert id="callMemberAddByeol_history" parameterType="com.dalbit.member.vo.procedure.P_MemberEditorVo">
        /* M_Member.xml - callMemberBasicAdd */
        INSERT INTO rd_data.tb_member_wallet_gold( mem_no, `type`, use_contents, gold, gold_old, gold_new, op_name) VALUES ( #{mem_no}, IFNULL(#{type}, 6), #{use_contents}, #{addByeolCnt}, #{beforByeolCnt}, #{afterByeolCnt}, #{opName} );
    </insert>

    <update id="callMemberEdit_date" parameterType="com.dalbit.member.vo.procedure.P_MemberEditorVo">
        /* M_Member.xml - callMemberEdit_date */
        update rd_data.tb_member_basic set last_upd_date = now() where mem_no = #{mem_no}
    </update>

    <insert id="callMemberMinusDal_history" parameterType="com.dalbit.member.vo.procedure.P_MemberEditorVo">
        /* M_Member.xml - callMemberBasicAdd */
        INSERT INTO rd_data.tb_member_wallet_ruby( mem_no, `type`, use_contents, ruby, ruby_old, ruby_new ) VALUES ( #{mem_no}, 8, #{use_contents}, #{addDalCnt}, #{beforDalCnt}, #{afterDalCnt} );
    </insert>

    <update id="callMemberBroadCastHide" parameterType="com.dalbit.member.vo.procedure.P_MemberEditorVo">
        /* M_Member.xml - callMemberBroadCastHide */
        update rd_data.tb_broadcast_room
           set hide = #{hide}
         where mem_no = #{mem_no}
           and state !=4
           <if test='room_no != "" and room_no != null'>
               and room_no = #{room_no}
           </if>
    </update>

    <select id="memberLoginHistory" parameterType="string" resultType="com.dalbit.member.vo.LoginHistoryVo">
        /* M_Member.xml - memberLoginHistory */
        SELECT a.ip
            ,a.last_device_uuid AS device_uuid
            ,a.last_device_model AS device_model
          FROM rd_data.tb_member_connect_state AS a
         where mem_no = #{mem_no}
         ORDER BY last_upd_date DESC LIMIT 1
    </select>

    <sql id="baseLoginHistory">
        <where>
            <if test='searchText != null and searchText != ""'>
                and ((b.mem_no like concat ('%', upper(#{searchText}), '%')
                     or b.mem_id like concat ('%', upper(#{searchText}), '%')
                     or b.mem_nick like concat ('%', upper(#{searchText}), '%')
                     or b.mem_userid like concat ('%', upper(#{searchText}), '%')
                     or b.mem_phone like concat ('%', upper(#{searchText}), '%')
                    )
                or upper(a.device_uuid) like concat ('%', upper(#{searchText}), '%')
                or upper(a.device_token) like concat ('%', upper(#{searchText}), '%')
                or a.ip like concat ('%', upper(#{searchText}), '%'))
            </if>
            <if test='txt_startSel != null and txt_startSel != ""'>
                and a.last_upd_date  <![CDATA[>=]]> DATE_FORMAT(#{txt_startSel},'%Y-%m-%d 00:00:00')
            </if>
            <if test='txt_endSel != null and txt_endSel != ""'>
                and a.last_upd_date <![CDATA[<=]]> DATE_FORMAT(#{txt_endSel},'%Y-%m-%d 23:59:59')
            </if>
        </where>
    </sql>

    <select id="selectLoginHistoryCnt" parameterType="com.dalbit.member.vo.LoginHistoryVo" resultType="int">
        /* Mem_Member.xml - selectLoginHistoryCnt */
        select count(*)
            from rd_data.tb_member_basic b left join rd_data.tb_member_session a on a.mem_no = b.mem_no
            <include refid="baseLoginHistory"/>
    </select>

    <select id="selectLoginHistory" parameterType="com.dalbit.member.vo.LoginHistoryVo" resultType="com.dalbit.member.vo.LoginHistoryVo">
        /* Mem_Member.xml - selectLoginHistory */
        select *, @rownum := @rownum + 1 as rowNum
          from(
            select a.idx
                , a.mem_no
                , b.mem_nick
                , b.mem_sex
                , b.mem_birth_year
                , b.mem_birth_month
                , b.mem_birth_day
                , a.os_type
                , a.device_uuid
                , a.device_token
                , a.app_version
                , a.browser
                , a.device_manufacturer
                , a.device_model
                , a.sdk_version
                , a.adid
                , a.location
                , a.ip
                , DATE_FORMAT(a.last_upd_date, '%Y-%m-%d %H:%i:%s') last_upd_date
            from rd_data.tb_member_basic b left join rd_data.tb_member_session a on a.mem_no = b.mem_no
            , (select @rownum := #{pageStart}) AS b
          <include refid="baseLoginHistory"/>
        order by a.idx desc
        ) a
        limit #{pageStart}, #{pageCnt}
    </select>

    <insert id="insertLoginBlock" parameterType="com.dalbit.member.vo.LoginBlockVo">
        /* Mem_Member.xml - insertLoginBlock */
        INSERT INTO rd_admin.tb_login_block(
            block_type
            , block_text
            , block_day
            , block_end_date
            , op_name
            , report_idx
        ) values(
              #{block_type}
            , #{block_text}
            , #{block_day}
            <choose>
                <when test="block_day == 99">
                    , '9999-12-31'
                </when>
                <when test="block_day == 98">
                    , '9999-12-30'
                </when>
                <otherwise>
                    , DATE_ADD( now(), interval #{block_day} day)
                </otherwise>
            </choose>
            , #{op_name}
            , #{report_idx}
        )
    </insert>

    <insert id="insertLoginBlockHistory" parameterType="com.dalbit.member.vo.LoginBlockHistVo">
        /* Mem_Member.xml - insertLoginBlockHistory */
        INSERT INTO rd_admin.tb_login_block_history(
            edit_contents
            , edit_type
            , last_upd_date
            , op_name
            , report_idx
        ) values(
            #{edit_contents}
            , #{edit_type}
            , now()
            , #{op_name}
            , #{report_idx}
        )
    </insert>

    <select id="getParentsAgreeInfo" parameterType="com.dalbit.member.vo.procedure.P_MemberParentsAgreeInputVo" resultType="com.dalbit.member.vo.procedure.P_MemberParentsAgreeOutputVo">
        /* Mem_Member.xml - getParentsAgreeInfo */
        SELECT
            mem_no
            , parents_name
            , parents_agree_yn
            , if(parents_sex=0, 'm', 'f') as parents_sex
            , substr(parents_birth_year, 3) as parents_birth_year
            , LPAD(parents_birth_month, 2, '0') as parents_birth_month
            , LPAD(parents_birth_day, 2, '0') as parents_birth_day
            , parents_comm_company
            , concat(substr(parents_phone, 1,3), '-', substr(parents_phone,4,4), '-', substr(parents_phone,8,4)) as parents_phone
            , if(parents_foreign_yn='0', '내국인', '외국인') as parents_foreign_yn
            , recant_yn
            , add_file
        FROM rd_data.tb_member_certification
        WHERE mem_no = #{memNo}
    </select>

    <update id="updateRecant" parameterType="com.dalbit.member.vo.procedure.P_MemberParentsAgreeInputVo">
        /* M_Member.xml - updateRecant */
        UPDATE rd_data.tb_member_certification
        SET recant_yn = 'y'
            , parents_agree_yn = 'n'
        WHERE mem_no = #{memNo}
    </update>

    <update id="updateBackRecant" parameterType="com.dalbit.member.vo.procedure.P_MemberParentsAgreeInputVo">
        /* M_Member.xml - updateBackRecant */
        UPDATE rd_data.tb_member_certification
        SET recant_yn = 'n'
            , parents_agree_yn = 'y'
        WHERE mem_no = #{memNo}
    </update>

    <select id="getMemberSetting" parameterType="java.lang.String" resultType="com.dalbit.member.vo.procedure.P_MemberSetting">
        /* M_Member.xml - getMemberSetting */
        SELECT * FROM rd_data.tb_member_setting WHERE mem_no = #{mem_no}
    </select>

    <delete id="deleteCert_back" parameterType="com.dalbit.member.vo.procedure.P_MemberParentsAgreeInputVo">
        /* M_Member.xml - deleteCert_back */
        delete from rd_data.tb_member_certification_bak
        where mem_no = #{memNo}
    </delete>

    <insert id="moveCertInfo" parameterType="com.dalbit.member.vo.procedure.P_MemberParentsAgreeInputVo">
        /* M_Member.xml - moveCertInfo */
        insert into rd_data.tb_member_certification_bak(
            mem_no
            , mem_name
            , mem_phone
            , mem_sex
            , mem_birth_year
            , mem_birth_month
            , mem_birth_day
            , comm_company
            , foreign_yn
            , cert_code
            , parents_agree_yn
            , parents_name
            , parents_phone
            , parents_sex
            , parents_birth_year
            , parents_birth_month
            , parents_birth_day
            , parents_comm_company
            , parents_foreign_yn
            , parents_cert_code
            , parents_agree_dt
            , parents_agree_term
            , recant_yn
            , add_file
            , expire_yn
            , last_upd_date
        ) select mem_no
            , mem_name
            , mem_phone
            , mem_sex
            , mem_birth_year
            , mem_birth_month
            , mem_birth_day
            , comm_company
            , foreign_yn
            , cert_code
            , parents_agree_yn
            , parents_name
            , parents_phone
            , parents_sex
            , parents_birth_year
            , parents_birth_month
            , parents_birth_day
            , parents_comm_company
            , parents_foreign_yn
            , parents_cert_code
            , parents_agree_dt
            , parents_agree_term
            , recant_yn
            , add_file
            , expire_yn
            , last_upd_date
        from rd_data.tb_member_certification
        where mem_no = 	#{memNo}
    </insert>

    <insert id="moveRollbackCertInfo" parameterType="com.dalbit.member.vo.procedure.P_MemberParentsAgreeInputVo">
        /* M_Member.xml - moveCertInfo */
        insert into rd_data.tb_member_certification(
            mem_no
            , mem_name
            , mem_phone
            , mem_sex
            , mem_birth_year
            , mem_birth_month
            , mem_birth_day
            , comm_company
            , foreign_yn
            , cert_code
            , parents_agree_yn
            , parents_name
            , parents_phone
            , parents_sex
            , parents_birth_year
            , parents_birth_month
            , parents_birth_day
            , parents_comm_company
            , parents_foreign_yn
            , parents_cert_code
            , parents_agree_dt
            , parents_agree_term
            , recant_yn
            , add_file
            , expire_yn
            , last_upd_date
        ) select mem_no
            , mem_name
            , mem_phone
            , mem_sex
            , mem_birth_year
            , mem_birth_month
            , mem_birth_day
            , comm_company
            , foreign_yn
            , cert_code
            , parents_agree_yn
            , parents_name
            , parents_phone
            , parents_sex
            , parents_birth_year
            , parents_birth_month
            , parents_birth_day
            , parents_comm_company
            , parents_foreign_yn
            , parents_cert_code
            , parents_agree_dt
            , parents_agree_term
            , recant_yn
            , add_file
            , expire_yn
            , last_upd_date
        from rd_data.tb_member_certification_bak
        where mem_no = 	#{memNo}
    </insert>

    <delete id="deleteCert" parameterType="com.dalbit.member.vo.procedure.P_MemberParentsAgreeInputVo">
        /* M_Member.xml - deleteCert */
        delete from rd_data.tb_member_certification
        where mem_no = #{memNo}
    </delete>

    <select id="getMemberAccumData" parameterType="com.dalbit.member.vo.procedure.P_MemberInfoInputVo" resultType="com.dalbit.member.vo.procedure.P_MemberAccumOutputVo">
        /* M_Member.xml - getMemberAccumData */
        select *
          from ( select count(*) as payCnt
                    , round(sum(pay.pay_amt)) as payAmt
                    , sum((select count(*) from rd_data.tb_payment_succ where order_id = pay.order_id and cancel_state='y')) as payCanCnt
                    , round(sum((select pay_amt from rd_data.tb_payment_succ where order_id = pay.order_id and cancel_state='y'))) as payCanAmt
                  from rd_data.tb_payment_succ pay
                 where pay.mem_no = #{mem_no} and pay.pay_yn='y') a
              , ( select count(*) as brodCnt
                    ,sum(airtime) broadTime
                    ,sum(gold) AS byeolCnt
                    ,sum(listener) as listenerCnt
                    ,sum(good) as goodCnt
                    ,sum(booster) as boostCnt
                   from rd_data.tb_member_broadcast_broadcasting
                  where mem_no=#{mem_no}) b
             , ( select count(*) as listenCnt
                    , sum(listentime) as listenTime
                    , sum(gift_ruby) as dalCnt
                    from rd_data.tb_member_broadcast_listening
                   where mem_no=#{mem_no}) c
               , ( select sum(ruby) as sendDal
                    from rd_data.tb_member_broadcast_item a
                   where mem_no=#{mem_no} and item_type ='3') d
               , ( select sum(ruby) as giftedDal
                     from rd_data.tb_member_broadcast_item a
                    where gifted_mem_no=#{mem_no} and item_type ='3') e
               , ( select count(*) as exchangeCnt
                        , sum(cash_real) as exchangeAmt
                     from rd_data.tb_member_exchange where mem_no=#{mem_no} and state ='1') f
               , ( select count(*) as exchangeCancelCnt
                        , sum(cash_real) as exchangeCancelAmt
                     from rd_data.tb_member_exchange where mem_no=#{mem_no} and state ='2') g
               , ( select count(*) as changeCnt
                        , sum(ruby) as changeByeol
                     from rd_data.tb_member_wallet_ruby where mem_no=#{mem_no} and type=6) h
               , (select count(*) as clipCnt
                        ,sum(count_byeol) as clipByeol
                        ,sum(count_play) as clipPlay
                        ,sum(count_good) as clipGood
                    from rd_data.tb_cast_room where mem_no=#{mem_no}) i

    </select>

    <insert id="insertAuth" parameterType="com.dalbit.member.vo.procedure.P_AuthVo">
        /* M_Member.xml - insertAuth */
        insert into rd_data.tb_member_certification(
           mem_no
            , mem_name
            , mem_phone
            , mem_sex
            , mem_birth_year
            , mem_birth_month
            , mem_birth_day
            , comm_company
            , foreign_yn
            , cert_code
            , parents_agree_yn
        ) values (
            #{memNo}
            , #{userName}
            , #{phoneNo}
            , #{gender}
            , #{birthYear}
            , #{birthMonth}
            , #{birthDay}
            , '기타'
            , '0'
            , 'admin'
            , 'n'
        )
    </insert>

    <select id="boostItemChange" statementType="CALLABLE" parameterType="com.dalbit.common.vo.ProcedureVo" resultType="com.dalbit.member.vo.procedure.P_MemberItemVo">
        call rd_admin.sp_admin_member_item_edit(#{data, mode=IN, jdbcType=VARCHAR}, #{ret, mode=OUT, jdbcType=INTEGER}, #{ext, mode=OUT, jdbcType=VARCHAR})
    </select>

    <select id="boostItemHistCnt" parameterType="com.dalbit.member.vo.procedure.P_MemberItemVo" resultType="int">
        select count(*)
        from rd_data.tb_member_item_history
        where mem_no = #{mem_no}
    </select>

    <select id="boostItemHist" parameterType="com.dalbit.member.vo.procedure.P_MemberItemVo" resultType="com.dalbit.member.vo.procedure.P_MemberItemVo">
        /* Mem_Member.xml - boostItemHist */
        select *
        from(
            select idx
                , mem_no
                , item_type as itemType
                , state
                , use_cnt as useCnt
                , item_cnt as itemCnt
                , op_name as opName
                , date_format(last_upd_date, '%Y.%m.%d %H:%i:%s') as lastUpdDate
                , @RNUM := @RNUM + 1 as rowNum
            from rd_data.tb_member_item_history
                , (select @RNUM := 0) r
            where mem_no = #{mem_no}
            order by idx desc
        )a
        LIMIT #{pageStart}, #{pageCnt}
    </select>

    <select id="setChangeAutoSetting" statementType="CALLABLE" parameterType="com.dalbit.common.vo.ProcedureVo" resultType="com.dalbit.member.vo.procedure.P_MemberEditorVo">
        call rd_admin.sp_admin_member_auto_change_setting_edit(#{data, mode=IN, jdbcType=VARCHAR}, #{ret, mode=OUT, jdbcType=INTEGER}, #{ext, mode=OUT, jdbcType=VARCHAR})
    </select>

    <select id="selectMemberBoostListCnt" parameterType="com.dalbit.member.vo.procedure.P_MemberListInputVo" resultType="int">
        select count(*)
        from rd_data.tb_member_basic basic
        <where>
            <if test='searchText != null and searchText != ""'>
                <choose>
                    <when test='searchType == "1"'>
                        AND mem_no like concat ('%', #{searchText}, '%')
                    </when>
                    <when test='searchType == "2"'>
                        AND mem_id like concat ('%', #{searchText}, '%')
                    </when>
                    <when test='searchType == "3"'>
                        AND mem_nick like concat ('%', #{searchText}, '%')
                    </when>
                    <when test='searchType == "4"'>
                        AND mem_phone like concat ('%', #{searchText}, '%')
                    </when>
                    <otherwise>
                        AND (
                            mem_no like concat ('%', #{searchText}, '%')
                            or mem_id like concat ('%', #{searchText}, '%')
                            or mem_nick like concat ('%', #{searchText}, '%')
                            or mem_phone like concat ('%', #{searchText}, '%')
                        )
                    </otherwise>
                </choose>
            </if>
        </where>
    </select>

    <select id="selectMemberBoostList" parameterType="com.dalbit.member.vo.procedure.P_MemberListInputVo" resultType="com.dalbit.member.vo.procedure.P_MemberListOutputVo">
        select basic.mem_no
             , basic.mem_userid
             , basic.mem_nick
             , basic.mem_phone
             , ifnull(item.item_cnt, 0) item_cnt
        from rd_data.tb_member_basic basic
                 left join rd_data.tb_member_item item on basic.mem_no = item.mem_no and item_type = 1
        <where>
            <if test='searchText != null and searchText != ""'>
                <choose>
                    <when test='searchType == "1"'>
                        AND basic.mem_no like concat ('%', #{searchText}, '%')
                    </when>
                    <when test='searchType == "2"'>
                        AND basic.mem_id like concat ('%', #{searchText}, '%')
                    </when>
                    <when test='searchType == "3"'>
                        AND basic.mem_nick like concat ('%', #{searchText}, '%')
                    </when>
                    <when test='searchType == "4"'>
                        AND basic.mem_phone like concat ('%', #{searchText}, '%')
                    </when>
                    <otherwise>
                        AND (
                        basic.mem_no like concat ('%', #{searchText}, '%')
                        or basic.mem_id like concat ('%', #{searchText}, '%')
                        or basic.mem_nick like concat ('%', #{searchText}, '%')
                        or basic.mem_phone like concat ('%', #{searchText}, '%')
                        )
                    </otherwise>
                </choose>
            </if>
        </where>
        limit #{pageStart}, #{pageCnt}
    </select>

    <select id="callMemberCouponHistory" statementType="CALLABLE" parameterType="com.dalbit.common.vo.ProcedureVo" resultType="com.dalbit.member.vo.procedure.P_MemberCouponVo">
        call rd_admin.sp_admin_coupon_member_history(#{data, mode=IN, jdbcType=VARCHAR}, #{ret, mode=OUT, jdbcType=INTEGER}, #{ext, mode=OUT, jdbcType=VARCHAR})
    </select>

    <select id="callAlbumList" statementType="CALLABLE" parameterType="com.dalbit.common.vo.ProcedureVo" resultType="com.dalbit.member.vo.procedure.P_MemberInfoOutputVo">
        call rd_data.sp_member_profile_album_list(#{data, mode=IN, jdbcType=VARCHAR}, #{ret, mode=OUT, jdbcType=INTEGER}, #{ext, mode=OUT, jdbcType=VARCHAR})
    </select>

    <update id="callMemberAlbumDelete" parameterType="com.dalbit.member.vo.procedure.P_MemberInfoInputVo">
        /* M_Member.xml - callMemberAlbumDelete */
        update rd_data.tb_member_profile_album set image_profile='' where mem_no=#{mem_no} and idx=#{idx}
    </update>

    <update id="callMemberProfileDelete" parameterType="com.dalbit.member.vo.procedure.P_MemberInfoInputVo">
        /* M_Member.xml - callMemberProfileDelete */
        update rd_data.tb_member_profile set image_profile='' , last_upd_date=now() where mem_no=#{mem_no}
    </update>

    <update id="callMemberLeaderAlbumDelete" parameterType="com.dalbit.member.vo.procedure.P_MemberInfoInputVo">
        /* M_Member.xml - callMemberLeaderAlbumDelete */
        update rd_data.tb_member_profile_album set image_profile='' where mem_no=#{mem_no} and leader_yn=1
    </update>
</mapper>
