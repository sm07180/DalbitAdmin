<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.dalbit.administrate.dao.Adm_TestIdDao" >

    <select id="getMemberInfo" parameterType="com.dalbit.administrate.vo.TestIdVo" resultType="com.dalbit.member.vo.MemberVo">
        /* Adm_TestId.xml - getMemberInfo */
        SELECT
            idx
            , mem_no memNo
            , mem_userid memId
            , mem_phone memPhone
            , mem_passwd memPasswd
            , mem_nick memNick
            , mem_sex memSex
            , mem_birth_year memBirthYear
            , mem_birth_month memBirthMonth
            , mem_birth_day memBirthDay
            , mem_slct memSlct
            , mem_adid memAdid
            , mem_state memState
            , mem_join_date memJoinDate
            , last_upd_date lastUpdDate
        FROM rd_data.tb_member_basic
        WHERE
            <if test="userInfo == 1">
                mem_phone = #{userInfoValue}
            </if>
            <if test="userInfo == 2">
                mem_no = #{userInfoValue}
            </if>
            <if test="userInfo == 3">
                mem_userid = #{userInfoValue}
            </if>
            <if test="userInfo == 4">
                mem_nick = #{userInfoValue}
            </if>
        LIMIT 1
    </select>

    <select id="getTestIdInfo" parameterType="com.dalbit.administrate.vo.TestIdVo" resultType="com.dalbit.administrate.vo.TestIdVo">
        /* Adm_TestId.xml - getTestIdInfo */
        SELECT *
        FROM rd_admin.tb_admin_test_account
        WHERE mem_no = #{mem_no}
    </select>

    <insert id="insertTestId" parameterType="com.dalbit.administrate.vo.TestIdVo">
        /* Adm_TestId.xml - insertTestId */
        INSERT INTO rd_admin.tb_admin_test_account(
            MEM_NO
            , EMP_NO
            , EMP_NAME
            , RELATION
        ) values(
              #{mem_no}
            , #{emp_no}
            , #{emp_name}
            , #{relation}
        )
    </insert>

    <insert id="insertTestId_history" parameterType="com.dalbit.administrate.vo.TestIdVo">
        /* Adm_TestId.xml - insertTestId */
        INSERT INTO rd_admin.tb_admin_test_account_history(
            MEM_NO
            , EMP_NO
            , EMP_NAME
            , RELATION
        ) values(
              #{mem_no}
            , #{emp_no}
            , #{emp_name}
            , #{relation}
        )
    </insert>

    <update id="updateInner" parameterType="com.dalbit.administrate.vo.TestIdVo">
        update rd_data.tb_member_basic set `inner`=#{inner} where mem_no=#{mem_no}
    </update>


    <select id="getTestIdSummary" parameterType="com.dalbit.common.vo.SearchVo" resultType="com.dalbit.administrate.vo.TestIdVo">
        /* Adm_TestId.xml - getTestIdSummary */
        SELECT
            EMP_NAME
            , COUNT(EMP_NAME) CNT
        FROM rd_admin.tb_admin_test_account test
            , rd_data.tb_member_basic member
        where test.mem_no = member.mem_no
        <if test="search_adminId == 1">
            AND test.is_admin = #{search_adminId}
        </if>
        GROUP BY EMP_NAME
        ORDER BY COUNT(EMP_NAME) DESC
    </select>

    <select id="getTestIdList" parameterType="com.dalbit.common.vo.SearchVo" resultType="com.dalbit.administrate.vo.TestIdListVo">
        /* Adm_TestId.xml - getTestIdList */
        select
            test.emp_no
            , test.emp_name
            , test.relation
            , test.is_admin
            , mem.mem_no
            , mem.mem_userid
            , mem.mem_userId
            , mem.mem_nick
            , mem.mem_sex
            , mem.mem_birth_year
            , mem.mem_birth_month
            , mem.mem_birth_day
            , CONCAT((DATE_FORMAT(NOW(),'%Y') - mem_birth_year) + 1,'') AS koreanAge
            , mem.mem_phone
            , mem.mem_state
            , DATE_FORMAT(test.reg_date, '%Y-%m-%d %H:%i:%s') as reg_date
            , level.level
            , level.grade
            , DATE_FORMAT((SELECT MAX(session.last_upd_date) FROM rd_data.tb_member_session `session` WHERE session.mem_no = mem.mem_no), '%Y.%m.%d %T') lastLoginDatetime
            , wallet.ruby as dal
            , wallet.gold as byeol
            , bs.last_profile_upd_date AS lastOpDate
        from rd_data.tb_member_basic mem
            JOIN rd_admin.tb_admin_test_account test ON mem.mem_no = test.mem_no
            JOIN rd_data.tb_member_level level ON mem.mem_no = level.mem_no
            JOIN rd_data.tb_member_wallet wallet ON mem.mem_no = wallet.mem_no
            LEFT JOIN rd_data.tb_member_basic_stat bs ON mem.mem_no = bs.mem_no
        <where>
            <if test='searchText != null and searchText != ""'>
                <choose>
                    <when test='searchType == 0'>
                        AND (test.emp_name like concat('%', #{searchText}, '%')
                            or lpad(test.emp_no,5,'0') like concat('%', #{searchText}, '%')
                            or mem.mem_no like concat('%', #{searchText}, '%')
                            or mem.mem_userid like concat('%', #{searchText}, '%')
                            or mem.mem_nick like concat('%', #{searchText}, '%')
                            or mem.mem_phone like concat('%', #{searchText}, '%'))
                    </when>
                    <when test='searchType == 1'>
                        AND test.emp_name like concat('%', #{searchText}, '%')
                    </when>
                    <when test='searchType == 2'>
                        AND mem.mem_no like concat('%', #{searchText}, '%')
                    </when>
                    <when test='searchType == 3'>
                        AND mem.mem_userid like concat('%', #{searchText}, '%')
                    </when>
                    <when test='searchType == 4'>
                        AND mem.mem_nick like concat('%', #{searchText}, '%')
                    </when>
                    <when test='searchType == 5'>
                        AND mem.mem_phone like concat('%', #{searchText}, '%')
                    </when>
                </choose>
            </if>
            <if test="search_adminId == 1">
                AND test.is_admin = #{search_adminId}
            </if>
        </where>
        order by test.reg_date desc
    </select>

    <delete id="deleteTestId" parameterType="java.lang.String">
        /* Adm_TestId.xml - deleteTestId */
        delete from rd_admin.tb_admin_test_account
        where mem_no in
        <foreach collection="array" item="memNo" separator="," open="(" close=")">
            #{memNo}
        </foreach>
    </delete>

    <select id="getCharge" parameterType="string" resultType="com.dalbit.administrate.vo.TestIdListVo">
        select '달' as `type`
               ,(ruby + money) as charge
               ,DATE_FORMAT(last_upd_date, '%Y-%m-%d %H:%i:%s') as chargeDate
               ,op_name as lastOpName
          from rd_data.tb_member_wallet_ruby
         where mem_no=#{mem_no} and `type` in (1,7) and op_name is not null
        union
        select '별' as `type`
               ,(gold + silver) as charge
               ,DATE_FORMAT(last_upd_date, '%Y-%m-%d %H:%i:%s') as chargeDate
               ,op_name as lastOpName
          from rd_data.tb_member_wallet_gold
         where mem_no=#{mem_no} and `type` in (1,7) and op_name is not null
        order by chargeDate desc
        limit 1
    </select>

    <update id="updateAdminId" parameterType="com.dalbit.administrate.vo.AdminIdVo">
        /* Adm_TestId.xml - updateAdminId */
        update rd_admin.tb_admin_test_account
        set is_admin = #{is_admin}
        where mem_no = #{mem_no}
    </update>

    <update id="updateAdminBadge" parameterType="com.dalbit.administrate.vo.AdminIdVo">
        /* Adm_TestId.xml - updateAdminBadge */
        update rd_data.tb_member_profile
        set admin_badge = #{is_admin}
        where
            <choose>
                <when test="mem_no != null">
                    mem_no = #{mem_no}
                </when>
                <otherwise>
                    mem_no in
                    <foreach collection="memNos" item="memNo" separator="," open="(" close=")">
                        #{memNo}
                    </foreach>
                </otherwise>
            </choose>
    </update>

    <insert id="insertMemberBadge" parameterType="com.dalbit.administrate.vo.MemberBadgeVo">
        /* Adm_TestId.xml - insertMemberBadge */
        INSERT INTO rd_data.tb_member_badge(
            mem_no
            , slct_type
            , badge_value
            , start_date
            , end_date
        ) values(
              #{mem_no}
            , #{slct_type}
            , #{badge_value}
            , now()
            , '9999-12-31 23:59:59'
        )
    </insert>

    <delete id="deleteMemberBadge" parameterType="com.dalbit.administrate.vo.MemberBadgeVo">
        /* Adm_TestId.xml - deleteMemberBadge */
        delete from rd_data.tb_member_badge
        where
        <choose>
            <when test="mem_no != null">
                mem_no = #{mem_no}
            </when>
            <otherwise>
                mem_no in
                <foreach collection="memNos" item="memNo" separator="," open="(" close=")">
                    #{memNo}
                </foreach>
            </otherwise>
        </choose>
            and slct_type = #{slct_type}
    </delete>

    <select id="selectAdminManager" parameterType="com.dalbit.administrate.vo.AdminManagerVo" resultType="com.dalbit.administrate.vo.AdminManagerVo">
        /* Adm_TestId.xml - selectAdminManager */
        select mem_no
        from rd_admin.tb_admin_test_account
        where is_admin = #{is_admin}
    </select>

    <insert id="insertBroadAdminManager" parameterType="com.dalbit.administrate.vo.AdminManagerVo">
        /* Adm_TestId.xml - insertBroadAdminManager */
        insert into rd_data.tb_member_broadcast_manager
        (mem_no, manager_mem_no, control, last_upd_date)
        values
        (#{mem_no}, #{manager_mem_no}, #{control}, now())
    </insert>

    <delete id="deleteBroadAdminManagerMaster" parameterType="com.dalbit.administrate.vo.AdminManagerVo">
        /* Adm_TestId.xml - deleteBroadAdminManagerMaster */
        delete from rd_data.tb_member_broadcast_manager
        where mem_no in (
                        select
                          mem_no
                        from rd_data.tb_member_broadcast_manager
                        where mem_no = (select mem_no from rd_admin.tb_admin_test_account where mem_no = #{mem_no} and is_admin = #{is_admin})
                        )
        and manager_mem_no in (select mem_no from rd_admin.tb_admin_test_account where is_admin = #{is_admin})
    </delete>

    <delete id="deleteBroadAdminManager" parameterType="com.dalbit.administrate.vo.AdminManagerVo">
        /* Adm_TestId.xml - deleteBroadAdminManager */
        delete from rd_data.tb_member_broadcast_manager
        where manager_mem_no in (
                       select
                         manager_mem_no
                       from rd_data.tb_member_broadcast_manager
                       where manager_mem_no = (select mem_no from rd_admin.tb_admin_test_account where mem_no = #{mem_no} and is_admin= #{is_admin})
                       )
        and mem_no in (select mem_no from rd_admin.tb_admin_test_account where is_admin = #{is_admin})
    </delete>
</mapper>